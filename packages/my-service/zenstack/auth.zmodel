import "./profile.zmodel"
import "./company.zmodel"
import "./form.zmodel"
import "./post.zmodel"
import "./affiliate.zmodel"
import "./wallet.zmodel"
import "./email.zmodel"
import "./role.zmodel"
import "./bonus.zmodel"

model User {
  id                       String                   @id @default(cuid())
  name                     String?
  email                    String                   @unique
  emailVerified            DateTime?
  image                    String?
  profile                  Profile?
  accounts                 Account[]
  sessions                 Session[]
  companies                Company[]
  forms                    Form[]
  submissions              FormSubmission[]
  approvals                FormSubmissionApproval[]
  posts                    Post[]
  postVersions             PostVersion[]
  advertiserClicks         UserAdvertiserClick[]
  cashbacks                UserCashback[]
  // Optional for WebAuthn support
  Authenticator            Authenticator[]
  wallets                  UserWallet[]
  processedUserWithdrawals UserWithdrawal[]
  processedUserDeposit     UserDeposit[]
  paymentMethods           UserPaymentMethod[]
  emailLogs                EmailLog[]
  roles                    Role[]

  // Bonus relations
  bonusEligibilities       BonusEligibility[]
  bonusTransactions        BonusTransaction[]

  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt

  @@allow('create,read', true)
  @@allow('all', auth() != null && auth().id == id)

  @@auth()
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}