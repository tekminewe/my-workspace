//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "rhel-openssl-3.0.x"]
}

enum AffiliateProviderEnum {
  InvolveAsia
}

enum AdvertiserCommissionStatusEnum {
  Inactive
  Active
}

enum AdvertiserCommissionRowStatusEnum {
  Inactive
  Active
}

enum AdvertiserStatusEnum {
  Inactive
  Active
}

enum AffiliateProviderStatusEnum {
  Inactive
  Active
}

enum CompanyAdvertiserStatusEnum {
  Inactive
  Active
}

enum AdvertiserCommissionTypeEnum {
  Percentage
  Fixed
}

enum AdvertiserCommissionShareTypeEnum {
  Percentage
  Fixed
}

enum AdvertiserCampaignStatusEnum {
  Inactive
  Active
}

enum AdvertiserCategoryEnum {
  DigitalServices
  Electronics
  Fashion
  Finance
  Food_Grocery
  Health_Beauty
  Home_Living
  Marketplace
  Others
  Travel
}

enum UserCashbackStatusEnum {
  Pending
  Approved
  Rejected
}

enum LanguageEnum {
  EN_MY @map("en-MY")
  EN_US @map("en-US")
  EN_GB @map("en-GB")
  ZH_CN @map("zh-CN")
  ZH_MY @map("zh-MY")
}

enum BonusTypeCodeEnum {
  FirstCashbackMultiplier
  SpendingThreshold
  ReferralBonus
  SeasonalBonus
}

enum BonusTypeStatusEnum {
  Draft
  Active
  Archived
}

enum BonusEligibilityStatusEnum {
  Available
  Used
  Expired
  Ineligible
}

enum PermissionEnum {
  AdminPanel
  ViewRole
  ManageRole
  ViewPermission
  ManagePermission
  ViewCarousel
  ManageCarousel
  ViewAdvertiser
  ManageAdvertiser
  ViewPost
  ManagePost
  ViewSite
  ManageSite
  ViewBonuses
  ManageBonuses
}

enum CurrencyEnum {
  MYR
  SGD
  USD
}

enum UserWalletStatusEnum {
  Active
  Frozen
  Inactive
}

enum UserWalletTransactionTypeEnum {
  AffiliateCashback
  Withdrawal
  FirstCashbackBonus
}

enum UserWalletTransactionStatusEnum {
  Pending
  Completed
  Failed
  Canceled
}

enum UserWithdrawalStatusEnum {
  Pending
  Completed
  Rejected
  Canceled
}

enum UserDepositStatusEnum {
  Pending
  Completed
  Rejected
  Canceled
}

enum PaymentChannelTypeEnum {
  BankTransfer
}

enum PaymentDirectionEnum {
  Deposit
  Withdrawal
  Both
}

enum PaymentChannelStatusEnum {
  Active
  Inactive
}

enum PaymentChannelFeeTypeEnum {
  Percentage
  Fixed
}

enum UserPaymentMethodStatusEnum {
  Active
  Inactive
}

enum PostStatusEnum {
  Draft
  Published
}

enum PostTypeEnum {
  Page
  Blog
}

enum CarouselStatusEnum {
  Active
  Inactive
}

enum FORM_COLUMN_TYPE_ENUM {
  LongText
  Datetime
  Dropdown
  SingleChoice

  @@map("FormColumnType")
}

enum FORM_APPROVAL_STATUS_ENUM {
  Pending
  Approved
  Rejected

  @@map("FormApprovalStatus")
}

enum FORM_SUBMISSION_ACTION_ENUM {
  Approval
}

enum EmailStatusEnum {
  ACCEPTED
  PENDING
  FAILED
  DELIVERED
  BOUNCED
  SOFT_BOUNCED
  COMPLAINT
  REJECTED
}

enum SuppressionTypeEnum {
  BOUNCED
  COMPLAINT
  MANUAL
}

enum BounceComplaintTypeEnum {
  BOUNCED
  COMPLAINT
}

enum PageStatus {
  DRAFT
  PUBLISHED
}

model AffiliateProviderStatus {
  id          AffiliateProviderStatusEnum       @id()
  description String?
  metadatas   AffiliateProviderStatusMetadata[]
  providers   AffiliateProvider[]
}

model AffiliateProviderStatusMetadata {
  statusId   AffiliateProviderStatusEnum
  status     AffiliateProviderStatus     @relation(fields: [statusId], references: [id], onDelete: Cascade)
  languageId LanguageEnum
  name       String

  @@id([statusId, languageId])
}

model AffiliateProvider {
  id                    AffiliateProviderEnum         @id()
  name                  String
  statusId              AffiliateProviderStatusEnum   @default(Active)
  status                AffiliateProviderStatus       @relation(fields: [statusId], references: [id])
  advertisers           Advertiser[]
  advertiserCampaigns   AdvertiserCampaign[]
  advertiserCommissions AdvertiserCommission[]
  createdAt             DateTime                      @default(now())
  updatedAt             DateTime                      @updatedAt()
  advertiserReferences  AdvertiserProviderReference[]

  @@index([statusId])
}

model AdvertiserStatus {
  id          AdvertiserStatusEnum       @id()
  description String?
  metadatas   AdvertiserStatusMetadata[]
  advertisers Advertiser[]
}

model AdvertiserStatusMetadata {
  statusId   AdvertiserStatusEnum
  status     AdvertiserStatus     @relation(fields: [statusId], references: [id], onDelete: Cascade)
  languageId LanguageEnum
  name       String

  @@id([statusId, languageId])
}

model Advertiser {
  id                 String                        @id() @default(cuid())
  companyAdvertisers CompanyAdvertiser[]
  campaigns          AdvertiserCampaign[]
  providers          AffiliateProvider[]
  commissions        AdvertiserCommission[]
  metadatas          AdvertiserMetadata[]
  createdAt          DateTime                      @default(now())
  updatedAt          DateTime                      @updatedAt()
  slug               String
  logoId             String?
  logo               Media?                        @relation(fields: [logoId], references: [id])
  statusId           AdvertiserStatusEnum          @default(Inactive)
  status             AdvertiserStatus              @relation(fields: [statusId], references: [id])
  popularity         Int                           @default(10)
  userClicks         UserAdvertiserClick[]
  userCashbacks      UserCashback[]
  notes              String?
  categories         AdvertiserCategory[]
  providerReferences AdvertiserProviderReference[]

  @@index([slug])
  @@index([statusId])
}

model AdvertiserMetadata {
  advertiserId String
  advertiser   Advertiser   @relation(fields: [advertiserId], references: [id], onDelete: Cascade)
  languageId   LanguageEnum
  name         String
  description  String

  @@id([advertiserId, languageId])
}

model AdvertiserProviderReference {
  advertiserId        String
  advertiser          Advertiser            @relation(fields: [advertiserId], references: [id], onDelete: Cascade)
  providerId          AffiliateProviderEnum
  provider            AffiliateProvider     @relation(fields: [providerId], references: [id])
  providerReferenceId String

  @@id([advertiserId, providerId])
}

model AdvertiserCommissionShareType {
  id          AdvertiserCommissionShareTypeEnum       @id()
  description String?
  metadatas   AdvertiserCommissionShareTypeMetadata[]
  commissions AdvertiserCommission[]
}

model AdvertiserCommissionShareTypeMetadata {
  typeId     AdvertiserCommissionShareTypeEnum
  type       AdvertiserCommissionShareType     @relation(fields: [typeId], references: [id], onDelete: Cascade)
  languageId LanguageEnum
  name       String

  @@id([typeId, languageId])
}

model AdvertiserCommissionStatus {
  id          AdvertiserCommissionStatusEnum       @id()
  description String?
  metadatas   AdvertiserCommissionStatusMetadata[]
  commissions AdvertiserCommission[]
}

model AdvertiserCommissionStatusMetadata {
  statusId   AdvertiserCommissionStatusEnum
  status     AdvertiserCommissionStatus     @relation(fields: [statusId], references: [id], onDelete: Cascade)
  languageId LanguageEnum
  name       String

  @@id([statusId, languageId])
}

model AdvertiserCommission {
  id                           String                            @id() @default(cuid())
  advertiserId                 String
  advertiser                   Advertiser                        @relation(fields: [advertiserId], references: [id], onDelete: Cascade)
  providerReferenceId          String
  providerId                   AffiliateProviderEnum
  provider                     AffiliateProvider                 @relation(fields: [providerId], references: [id])
  commissionShare              Float                             @default(10)
  commissionShareTypeId        AdvertiserCommissionShareTypeEnum
  commissionShareType          AdvertiserCommissionShareType     @relation(fields: [commissionShareTypeId], references: [id])
  commissionRows               AdvertiserCommissionRow[]
  companyAdvertiserCommissions CompanyAdvertiserCommission[]
  dayToValidate                Int
  dayToPayout                  Int
  url                          String
  statusId                     AdvertiserCommissionStatusEnum    @default(Inactive)
  status                       AdvertiserCommissionStatus        @relation(fields: [statusId], references: [id])

  @@unique([advertiserId, providerId, providerReferenceId])
  @@index([statusId])
  @@index([providerId, providerReferenceId])
}

model AdvertiserCommissionType {
  id                              AdvertiserCommissionTypeEnum       @id()
  description                     String?
  metadatas                       AdvertiserCommissionTypeMetadata[]
  commissionRows                  AdvertiserCommissionRow[]
  companyAdvertiserCommissions    CompanyAdvertiserCommission[]
  companyAdvertiserCommissionRows CompanyAdvertiserCommissionRow[]
}

model AdvertiserCommissionTypeMetadata {
  typeId     AdvertiserCommissionTypeEnum
  type       AdvertiserCommissionType     @relation(fields: [typeId], references: [id], onDelete: Cascade)
  languageId LanguageEnum
  name       String

  @@id([typeId, languageId])
}

model AdvertiserCommissionRow {
  id                              String                            @id() @default(cuid())
  providerReferenceId             String
  advertiserCommissionId          String
  advertiserCommission            AdvertiserCommission              @relation(fields: [advertiserCommissionId], references: [id], onDelete: Cascade)
  commission                      Float
  typeId                          AdvertiserCommissionTypeEnum
  type                            AdvertiserCommissionType          @relation(fields: [typeId], references: [id])
  companyAdvertiserCommissionRows CompanyAdvertiserCommissionRow[]
  metadatas                       AdvertiserCommissionRowMetadata[]
  createdAt                       DateTime                          @default(now())
  updatedAt                       DateTime                          @updatedAt()
  statusId                        AdvertiserCommissionRowStatusEnum @default(Inactive)
  status                          AdvertiserCommissionRowStatus     @relation(fields: [statusId], references: [id])

  @@unique([advertiserCommissionId, providerReferenceId])
  @@index([advertiserCommissionId])
  @@index([providerReferenceId])
}

model AdvertiserCommissionRowStatus {
  id             AdvertiserCommissionRowStatusEnum       @id()
  description    String?
  metadatas      AdvertiserCommissionRowStatusMetadata[]
  commissionRows AdvertiserCommissionRow[]
}

model AdvertiserCommissionRowStatusMetadata {
  statusId   AdvertiserCommissionRowStatusEnum
  status     AdvertiserCommissionRowStatus     @relation(fields: [statusId], references: [id], onDelete: Cascade)
  languageId LanguageEnum
  name       String

  @@id([statusId, languageId])
}

model AdvertiserCommissionRowMetadata {
  commissionRowId String
  commissionRow   AdvertiserCommissionRow @relation(fields: [commissionRowId], references: [id], onDelete: Cascade)
  languageId      LanguageEnum
  name            String

  @@id([commissionRowId, languageId])
}

model AdvertiserCategory {
  id          AdvertiserCategoryEnum       @id()
  description String?
  metadatas   AdvertiserCategoryMetadata[]
  advertisers Advertiser[]
}

model AdvertiserCategoryMetadata {
  categoryId AdvertiserCategoryEnum
  category   AdvertiserCategory     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  languageId LanguageEnum
  name       String

  @@id([categoryId, languageId])
}

model AdvertiserCampaignStatus {
  id          AdvertiserCampaignStatusEnum       @id()
  description String?
  metadatas   AdvertiserCampaignStatusMetadata[]
  campaigns   AdvertiserCampaign[]
}

model AdvertiserCampaignStatusMetadata {
  statusId   AdvertiserCampaignStatusEnum
  status     AdvertiserCampaignStatus     @relation(fields: [statusId], references: [id], onDelete: Cascade)
  languageId LanguageEnum
  name       String

  @@id([statusId, languageId])
}

model AdvertiserCampaign {
  id                  String                       @id() @default(cuid())
  advertiserId        String
  advertiser          Advertiser                   @relation(fields: [advertiserId], references: [id], onDelete: Cascade)
  providerReferenceId String
  providerId          AffiliateProviderEnum
  provider            AffiliateProvider            @relation(fields: [providerId], references: [id])
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt()
  metadatas           AdvertiserCampaignMetadata[]
  voucherCodes        String[]
  startDate           DateTime
  endDate             DateTime?
  statusId            AdvertiserCampaignStatusEnum @default(Inactive)
  status              AdvertiserCampaignStatus     @relation(fields: [statusId], references: [id])
  url                 String
  slug                String                       @unique()

  @@unique([advertiserId, providerId, providerReferenceId])
  @@unique([providerId, providerReferenceId])
}

model AdvertiserCampaignMetadata {
  advertiserCampaignId String
  advertiserCampaign   AdvertiserCampaign @relation(fields: [advertiserCampaignId], references: [id], onDelete: Cascade)
  languageId           LanguageEnum
  name                 String
  description          String
  bannerId             String?
  banner               Media?             @relation(fields: [bannerId], references: [id])

  @@id([advertiserCampaignId, languageId])
}

model CompanyAdvertiserStatus {
  id                 CompanyAdvertiserStatusEnum       @id()
  description        String?
  metadatas          CompanyAdvertiserStatusMetadata[]
  companyAdvertisers CompanyAdvertiser[]
}

model CompanyAdvertiserStatusMetadata {
  statusId   CompanyAdvertiserStatusEnum
  status     CompanyAdvertiserStatus     @relation(fields: [statusId], references: [id], onDelete: Cascade)
  languageId LanguageEnum
  name       String

  @@id([statusId, languageId])
}

model CompanyAdvertiser {
  id             String                           @id() @default(cuid())
  companyId      String
  company        Company                          @relation(fields: [companyId], references: [id])
  advertiserId   String
  advertiser     Advertiser                       @relation(fields: [advertiserId], references: [id])
  commissions    CompanyAdvertiserCommission[]
  commissionRows CompanyAdvertiserCommissionRow[]
  statusId       CompanyAdvertiserStatusEnum
  status         CompanyAdvertiserStatus          @relation(fields: [statusId], references: [id])
  createdAt      DateTime                         @default(now())
  updatedAt      DateTime                         @updatedAt()

  @@unique([companyId, advertiserId])
  @@index([statusId])
}

model CompanyAdvertiserCommission {
  id                     String                       @id() @default(cuid())
  companyAdvertiserId    String
  companyAdvertiser      CompanyAdvertiser            @relation(fields: [companyAdvertiserId], references: [id])
  advertiserCommissionId String
  advertiserCommission   AdvertiserCommission         @relation(fields: [advertiserCommissionId], references: [id])
  commission             Float
  typeId                 AdvertiserCommissionTypeEnum
  type                   AdvertiserCommissionType     @relation(fields: [typeId], references: [id])
  createdAt              DateTime                     @default(now())
  updatedAt              DateTime                     @updatedAt()

  @@unique([companyAdvertiserId, advertiserCommissionId])
}

model CompanyAdvertiserCommissionRow {
  id                        String                       @id() @default(cuid())
  companyAdvertiserId       String
  companyAdvertiser         CompanyAdvertiser            @relation(fields: [companyAdvertiserId], references: [id])
  advertiserCommissionRowId String
  advertiserCommissionRow   AdvertiserCommissionRow      @relation(fields: [advertiserCommissionRowId], references: [id])
  commission                Float
  typeId                    AdvertiserCommissionTypeEnum
  type                      AdvertiserCommissionType     @relation(fields: [typeId], references: [id])
  createdAt                 DateTime                     @default(now())
  updatedAt                 DateTime                     @updatedAt()

  @@unique([companyAdvertiserId, advertiserCommissionRowId])
}

model UserAdvertiserClick {
  id           String     @id() @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  advertiserId String
  advertiser   Advertiser @relation(fields: [advertiserId], references: [id])
  ipAddress    String
  referrer     String
  userAgent    String
  clickedAt    DateTime   @default(now())

  @@index([userId])
  @@index([advertiserId])
}

model UserCashbackStatus {
  id            UserCashbackStatusEnum       @id()
  description   String?
  metadatas     UserCashbackStatusMetadata[]
  userCashbacks UserCashback[]
}

model UserCashbackStatusMetadata {
  statusId   UserCashbackStatusEnum
  status     UserCashbackStatus     @relation(fields: [statusId], references: [id], onDelete: Cascade)
  languageId LanguageEnum
  name       String

  @@id([statusId, languageId])
}

model UserCashback {
  id                  String                 @id() @default(cuid())
  userId              String
  user                User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  advertiserId        String
  advertiser          Advertiser             @relation(fields: [advertiserId], references: [id])
  providerReferenceId String
  advertiserOrderId   String
  amount              Float
  netAmount           Float
  share               Float
  currencyId          CurrencyEnum
  currency            Currency               @relation(fields: [currencyId], references: [id])
  statusId            UserCashbackStatusEnum @default(Pending)
  status              UserCashbackStatus     @relation(fields: [statusId], references: [id])
  bonusTransactions   BonusTransaction[]     @relation("BonusSourceCashback")
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt()

  @@unique([advertiserOrderId])
  @@unique([providerReferenceId])
  @@index([userId])
  @@index([advertiserId])
  @@index([statusId])
}

model Company {
  id                 String              @id() @default(cuid())
  name               String
  users              User[]
  forms              Form[]
  posts              Post[]
  postVersions       PostVersion[]
  tags               Tag[]
  media              Media[]
  pages              Page[]
  pageVersions       PageVersion[]
  companyAdvertisers CompanyAdvertiser[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt()
}

model User {
  id                       String                   @id() @default(cuid())
  name                     String?
  email                    String                   @unique()
  emailVerified            DateTime?
  image                    String?
  profile                  Profile?
  accounts                 Account[]
  sessions                 Session[]
  companies                Company[]
  forms                    Form[]
  submissions              FormSubmission[]
  approvals                FormSubmissionApproval[]
  posts                    Post[]
  postVersions             PostVersion[]
  advertiserClicks         UserAdvertiserClick[]
  cashbacks                UserCashback[]
  Authenticator            Authenticator[]
  wallets                  UserWallet[]
  processedUserWithdrawals UserWithdrawal[]
  processedUserDeposit     UserDeposit[]
  paymentMethods           UserPaymentMethod[]
  emailLogs                EmailLog[]
  roles                    Role[]
  bonusEligibilities       BonusEligibility[]
  bonusTransactions        BonusTransaction[]
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt()
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt()
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  id                   String  @id() @default(cuid())
  credentialID         String  @unique()
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  userId     String       @id() @unique()
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName  String
  lastName   String
  photoUrl   String?
  languageId LanguageEnum @default(EN_MY)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt()
}

model Language {
  id                 LanguageEnum        @id()
  name               String
  code               String
  shortName          String
  isSupported        Boolean             @default(false)
  isDefault          Boolean             @default(false)
  bonusTypeMetadatas BonusTypeMetadata[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt()
}

model BonusType {
  id              String              @id() @default(cuid())
  codeId          BonusTypeCodeEnum
  version         Int                 @default(1)
  priority        Int                 @default(100)
  expiryDays      Int?
  maxUsagePerUser Int                 @default(1)
  ruleConfig      Json
  statusId        BonusTypeStatusEnum @default(Draft)
  status          BonusTypeStatus     @relation(fields: [statusId], references: [id])
  effectiveFrom   DateTime            @default(now())
  effectiveTo     DateTime?
  metadatas       BonusTypeMetadata[]
  eligibilities   BonusEligibility[]
  transactions    BonusTransaction[]  @relation("BonusTypeToBonusTransaction")
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt()
  createdBy       String?
  updatedBy       String?

  @@unique([codeId, version])
  @@index([statusId])
  @@index([effectiveFrom, effectiveTo])
  @@index([codeId])
}

model BonusTypeStatus {
  id          BonusTypeStatusEnum       @id()
  description String?
  metadatas   BonusTypeStatusMetadata[]
  bonusTypes  BonusType[]
}

model BonusTypeStatusMetadata {
  statusId   BonusTypeStatusEnum
  status     BonusTypeStatus     @relation(fields: [statusId], references: [id], onDelete: Cascade)
  languageId LanguageEnum
  name       String

  @@id([statusId, languageId])
}

model BonusTypeMetadata {
  bonusTypeId        String
  bonusType          BonusType    @relation(fields: [bonusTypeId], references: [id], onDelete: Cascade)
  languageId         LanguageEnum
  language           Language     @relation(fields: [languageId], references: [id])
  title              String
  description        String
  termsAndConditions String
  featuredImageId    String?
  logoId             String?
  featuredImage      Media?       @relation("BonusMetadataFeaturedImage", fields: [featuredImageId], references: [id])
  logo               Media?       @relation("BonusMetadataLogo", fields: [logoId], references: [id])

  @@id([bonusTypeId, languageId])
  @@index([bonusTypeId])
  @@index([languageId])
}

model BonusEligibility {
  id                  String                     @id() @default(cuid())
  userId              String
  user                User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  bonusTypeId         String
  bonusType           BonusType                  @relation(fields: [bonusTypeId], references: [id])
  bonusVersion        Int
  statusId            BonusEligibilityStatusEnum @default(Available)
  status              BonusEligibilityStatus     @relation(fields: [statusId], references: [id])
  availableAt         DateTime                   @default(now())
  expiresAt           DateTime?
  usedAt              DateTime?
  eligibilityMetadata Json?
  transactions        BonusTransaction[]
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt()

  @@unique([userId, bonusTypeId, bonusVersion])
  @@index([userId])
  @@index([bonusTypeId])
  @@index([statusId])
  @@index([availableAt])
  @@index([expiresAt])
}

model BonusEligibilityStatus {
  id            BonusEligibilityStatusEnum       @id()
  description   String?
  metadatas     BonusEligibilityStatusMetadata[]
  eligibilities BonusEligibility[]
}

model BonusEligibilityStatusMetadata {
  statusId   BonusEligibilityStatusEnum
  status     BonusEligibilityStatus     @relation(fields: [statusId], references: [id], onDelete: Cascade)
  languageId LanguageEnum
  name       String

  @@id([statusId, languageId])
}

model BonusTransaction {
  id                  String           @id() @default(cuid())
  userId              String
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  bonusEligibilityId  String
  bonusEligibility    BonusEligibility @relation(fields: [bonusEligibilityId], references: [id])
  bonusTypeId         String
  bonusType           BonusType        @relation("BonusTypeToBonusTransaction", fields: [bonusTypeId], references: [id])
  bonusVersion        Int
  amount              Float
  currencyId          CurrencyEnum
  currency            Currency         @relation(fields: [currencyId], references: [id])
  sourceTransactionId String?
  sourceCashback      UserCashback?    @relation("BonusSourceCashback", fields: [sourceTransactionId], references: [id])
  merchantCallbackId  String?
  processedAt         DateTime         @default(now())
  walletTransactionId String?
  processingMetadata  Json?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt()

  @@index([userId])
  @@index([bonusEligibilityId])
  @@index([sourceTransactionId])
  @@index([processedAt])
  @@index([userId, processedAt])
}

model Role {
  id          String       @id() @default(cuid())
  name        String       @unique()
  description String?
  users       User[]
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt()
}

model Permission {
  id          String         @id() @default(cuid())
  name        PermissionEnum @unique()
  description String?
  roles       Role[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt()
}

model Currency {
  id                        CurrencyEnum               @id()
  description               String?
  metadatas                 CurrencyMetadata[]
  paymentChannels           PaymentChannel[]
  userWallets               UserWallet[]
  userWalletTransactionLogs UserWalletTransactionLog[]
  userDeposits              UserDeposit[]
  userWithdrawals           UserWithdrawal[]
  userCashbacks             UserCashback[]
  bonusTransactions         BonusTransaction[]
}

model CurrencyMetadata {
  currencyId CurrencyEnum
  currency   Currency     @relation(fields: [currencyId], references: [id])
  languageId LanguageEnum
  name       String

  @@unique([currencyId, languageId])
}

model UserWalletStatus {
  id          UserWalletStatusEnum       @id()
  description String?
  metadatas   UserWalletStatusMetadata[]
  userWallets UserWallet[]
}

model UserWalletStatusMetadata {
  statusId   UserWalletStatusEnum
  status     UserWalletStatus     @relation(fields: [statusId], references: [id])
  languageId LanguageEnum
  name       String

  @@id([statusId, languageId])
}

model UserWallet {
  id          String                     @id() @default(cuid())
  userId      String
  user        User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  currencyId  CurrencyEnum
  currency    Currency                   @relation(fields: [currencyId], references: [id])
  statusId    UserWalletStatusEnum       @default(Active)
  status      UserWalletStatus           @relation(fields: [statusId], references: [id])
  balance     Float
  logs        UserWalletTransactionLog[]
  withdrawals UserWithdrawal[]
  deposits    UserDeposit[]
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt()

  @@unique([userId, currencyId])
  @@index([statusId])
}

model UserWalletTransactionType {
  id          UserWalletTransactionTypeEnum       @id()
  description String?
  metadatas   UserWalletTransactionTypeMetadata[]
  logs        UserWalletTransactionLog[]
}

model UserWalletTransactionTypeMetadata {
  typeId     UserWalletTransactionTypeEnum
  type       UserWalletTransactionType     @relation(fields: [typeId], references: [id])
  languageId LanguageEnum
  name       String

  @@id([typeId, languageId])
}

model UserWalletTransactionStatus {
  id          UserWalletTransactionStatusEnum       @id()
  description String?
  metadatas   UserWalletTransactionStatusMetadata[]
  logs        UserWalletTransactionLog[]
}

model UserWalletTransactionStatusMetadata {
  statusId   UserWalletTransactionStatusEnum
  status     UserWalletTransactionStatus     @relation(fields: [statusId], references: [id])
  languageId LanguageEnum
  name       String

  @@id([statusId, languageId])
}

model UserWalletTransactionLog {
  id            String                          @id() @default(cuid())
  walletId      String
  wallet        UserWallet                      @relation(fields: [walletId], references: [id], onDelete: Cascade)
  currencyId    CurrencyEnum
  currency      Currency                        @relation(fields: [currencyId], references: [id])
  balanceBefore Float
  balanceAfter  Float
  amount        Float
  typeId        UserWalletTransactionTypeEnum
  type          UserWalletTransactionType       @relation(fields: [typeId], references: [id])
  statusId      UserWalletTransactionStatusEnum @default(Pending)
  status        UserWalletTransactionStatus     @relation(fields: [statusId], references: [id])
  /// If the transaction is a AffiliateCashback, this will be the UserCashback.id
  /// If the transaction is a Withdrawal, this will be the UserWithdrawal.id
  reference     String?
  extra         Json?
  description   String?
  createdAt     DateTime                        @default(now())
  updatedAt     DateTime                        @updatedAt()
}

model UserDepositStatus {
  id          UserDepositStatusEnum       @id()
  description String?
  metadatas   UserDepositStatusMetadata[]
  deposits    UserDeposit[]
}

model UserDepositStatusMetadata {
  statusId   UserDepositStatusEnum
  status     UserDepositStatus     @relation(fields: [statusId], references: [id])
  languageId LanguageEnum
  name       String

  @@unique([statusId, languageId])
}

model UserDeposit {
  id              String                @id() @default(cuid())
  walletId        String
  wallet          UserWallet            @relation(fields: [walletId], references: [id], onDelete: Cascade)
  currencyId      CurrencyEnum
  currency        Currency              @relation(fields: [currencyId], references: [id])
  amount          Float
  paymentMethodId String?
  paymentMethod   UserPaymentMethod?    @relation(fields: [paymentMethodId], references: [id])
  statusId        UserDepositStatusEnum @default(Pending)
  status          UserDepositStatus     @relation(fields: [statusId], references: [id])
  processedAt     DateTime?
  processedById   String?
  processedBy     User?                 @relation(fields: [processedById], references: [id])
  notes           String?
  reference       String?
  processingFee   Float
  netAmount       Float
  extra           Json?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt()

  @@index([statusId])
}

model UserWithdrawalStatus {
  id          UserWithdrawalStatusEnum       @id()
  description String?
  metadatas   UserWithdrawalStatusMetadata[]
  withdrawals UserWithdrawal[]
}

model UserWithdrawalStatusMetadata {
  statusId   UserWithdrawalStatusEnum
  status     UserWithdrawalStatus     @relation(fields: [statusId], references: [id])
  languageId LanguageEnum
  name       String

  @@id([statusId, languageId])
}

model UserWithdrawal {
  id              String                   @id() @default(cuid())
  walletId        String
  wallet          UserWallet               @relation(fields: [walletId], references: [id], onDelete: Cascade)
  currencyId      CurrencyEnum
  currency        Currency                 @relation(fields: [currencyId], references: [id])
  amount          Float
  statusId        UserWithdrawalStatusEnum @default(Pending)
  status          UserWithdrawalStatus     @relation(fields: [statusId], references: [id])
  processedAt     DateTime?
  processedById   String?
  processedBy     User?                    @relation(fields: [processedById], references: [id])
  notes           String?
  /// If the paymentMethod.paymentChannel is a BankTransfer, this will be the bank transaction id
  reference       String?
  processingFee   Float
  netAmount       Float
  extra           Json?
  paymentMethod   UserPaymentMethod        @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt()

  @@index([statusId])
}

model PaymentChannelType {
  id              PaymentChannelTypeEnum       @id()
  description     String?
  metadatas       PaymentChannelTypeMetadata[]
  paymentChannels PaymentChannel[]
}

model PaymentChannelTypeMetadata {
  typeId     PaymentChannelTypeEnum
  type       PaymentChannelType     @relation(fields: [typeId], references: [id])
  languageId LanguageEnum
  name       String

  @@id([typeId, languageId])
}

model PaymentChannelStatus {
  id              PaymentChannelStatusEnum       @id()
  description     String?
  metadatas       PaymentChannelStatusMetadata[]
  paymentChannels PaymentChannel[]
}

model PaymentChannelStatusMetadata {
  statusId   PaymentChannelStatusEnum
  status     PaymentChannelStatus     @relation(fields: [statusId], references: [id])
  languageId LanguageEnum
  name       String

  @@id([statusId, languageId])
}

model PaymentDirection {
  id                 PaymentDirectionEnum       @id()
  description        String?
  metadatas          PaymentDirectionMetadata[]
  paymentChannels    PaymentChannel[]
  userPaymentMethods UserPaymentMethod[]
}

model PaymentDirectionMetadata {
  directionId PaymentDirectionEnum
  direction   PaymentDirection     @relation(fields: [directionId], references: [id])
  languageId  LanguageEnum
  name        String

  @@id([directionId, languageId])
}

model PaymentChannelFeeType {
  id              PaymentChannelFeeTypeEnum       @id()
  description     String?
  metadatas       PaymentChannelFeeTypeMetadata[]
  paymentChannels PaymentChannel[]
}

model PaymentChannelFeeTypeMetadata {
  typeId     PaymentChannelFeeTypeEnum
  type       PaymentChannelFeeType     @relation(fields: [typeId], references: [id])
  languageId LanguageEnum
  name       String

  @@id([typeId, languageId])
}

model PaymentChannel {
  id                 String                    @id() @default(cuid())
  metadatas          PaymentChannelMetadata[]
  typeId             PaymentChannelTypeEnum
  type               PaymentChannelType        @relation(fields: [typeId], references: [id])
  directionId        PaymentDirectionEnum
  direction          PaymentDirection          @relation(fields: [directionId], references: [id])
  statusId           PaymentChannelStatusEnum  @default(Active)
  status             PaymentChannelStatus      @relation(fields: [statusId], references: [id])
  description        String?
  extra              Json?
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt()
  minAmount          Float
  maxAmount          Float
  processingFee      Float                     @default(0)
  feeTypeId          PaymentChannelFeeTypeEnum
  feeType            PaymentChannelFeeType     @relation(fields: [feeTypeId], references: [id])
  currencies         Currency[]
  userPaymentMethods UserPaymentMethod[]
  sortOrder          Int                       @default(0)
  logoId             String?
  logo               Media?                    @relation(fields: [logoId], references: [id])
}

model PaymentChannelMetadata {
  channelId  String
  channel    PaymentChannel @relation(fields: [channelId], references: [id])
  languageId LanguageEnum
  name       String

  @@id([channelId, languageId])
}

model UserPaymentMethodStatus {
  id                 UserPaymentMethodStatusEnum       @id()
  description        String?
  metadatas          UserPaymentMethodStatusMetadata[]
  userPaymentMethods UserPaymentMethod[]
}

model UserPaymentMethodStatusMetadata {
  statusId   UserPaymentMethodStatusEnum
  status     UserPaymentMethodStatus     @relation(fields: [statusId], references: [id])
  languageId LanguageEnum
  name       String

  @@id([statusId, languageId])
}

model UserPaymentMethod {
  id               String                      @id() @default(cuid())
  userId           String
  user             User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentChannelId String
  paymentChannel   PaymentChannel              @relation(fields: [paymentChannelId], references: [id])
  directionId      PaymentDirectionEnum
  direction        PaymentDirection            @relation(fields: [directionId], references: [id])
  accountName      String
  accountNumber    String?
  bankName         String?
  swiftCode        String?
  paypalEmail      String?
  isDefault        Boolean                     @default(false)
  extra            Json?
  statusId         UserPaymentMethodStatusEnum @default(Active)
  status           UserPaymentMethodStatus     @relation(fields: [statusId], references: [id])
  createdAt        DateTime                    @default(now())
  updatedAt        DateTime                    @updatedAt()
  withdrawals      UserWithdrawal[]
  deposits         UserDeposit[]

  @@unique([userId, accountNumber, paymentChannelId])
}

model Media {
  id                          String                       @id() @default(cuid())
  filePath                    String
  mimeType                    String
  caption                     String?
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt()
  postsWithFeatureImage       Post[]                       @relation(name: "featureImages")
  postsWithOgImage            Post[]                       @relation(name: "ogImages")
  postVersionWithFeatureImage PostVersion[]                @relation(name: "featureImages")
  postVersionWithOgImage      PostVersion[]                @relation(name: "ogImages")
  advertisers                 Advertiser[]
  advertiserCampaignMetadatas AdvertiserCampaignMetadata[]
  companyId                   String?
  company                     Company?                     @relation(fields: [companyId], references: [id])
  siteLogo                    SiteMetadata[]               @relation(name: "SiteMetadataLogo")
  siteDarkLogo                SiteMetadata[]               @relation(name: "SiteMetadataDarkLogo")
  paymentChannelLogos         PaymentChannel[]
  carouselMetadatas           CarouselMetadata[]
  bonusMetadataFeatured       BonusTypeMetadata[]          @relation("BonusMetadataFeaturedImage")
  bonusMetadataLogo           BonusTypeMetadata[]          @relation("BonusMetadataLogo")

  @@unique([filePath, companyId])
  @@index([companyId])
}

model PostType {
  id           PostTypeEnum       @id()
  metadatas    PostTypeMetadata[]
  posts        Post[]
  postVersions PostVersion[]
}

model PostTypeMetadata {
  postTypeId PostTypeEnum
  postType   PostType     @relation(fields: [postTypeId], references: [id])
  languageId LanguageEnum
  name       String

  @@id([postTypeId, languageId])
}

model PostStatus {
  id           PostStatusEnum       @id()
  metadatas    PostStatusMetadata[]
  posts        Post[]
  postVersions PostVersion[]
}

model PostStatusMetadata {
  postStatusId PostStatusEnum
  postStatus   PostStatus     @relation(fields: [postStatusId], references: [id])
  languageId   LanguageEnum
  name         String

  @@id([postStatusId, languageId])
}

model Post {
  id              String          @id() @default(cuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt()
  postDate        DateTime        @default(now())
  slug            String          @unique()
  title           String
  content         String
  featuredImageId String?
  featuredImage   Media?          @relation(name: "featureImages", fields: [featuredImageId], references: [id], onDelete: SetNull)
  statusId        PostStatusEnum?
  status          PostStatus?     @relation(fields: [statusId], references: [id])
  editorVersion   Int             @default(0)
  description     String?
  ogTitle         String?
  ogDescription   String?
  ogImageId       String?
  ogImage         Media?          @relation(name: "ogImages", fields: [ogImageId], references: [id], onDelete: SetNull)
  versionHistory  PostVersion[]
  tags            Tag[]
  companyId       String?
  company         Company?        @relation(fields: [companyId], references: [id])
  authorId        String
  author          User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postTypeId      PostTypeEnum    @default(Page)
  postType        PostType        @relation(fields: [postTypeId], references: [id])
}

model PostVersion {
  id              String          @id() @default(cuid())
  version         Int             @default(1)
  slug            String
  postId          String
  post            Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  title           String
  content         String
  featuredImageId String?
  featuredImage   Media?          @relation(name: "featureImages", fields: [featuredImageId], references: [id], onDelete: SetNull)
  statusId        PostStatusEnum?
  status          PostStatus?     @relation(fields: [statusId], references: [id])
  editorVersion   Int             @default(0)
  description     String?
  ogTitle         String?
  ogDescription   String?
  ogImageId       String?
  ogImage         Media?          @relation(name: "ogImages", fields: [ogImageId], references: [id], onDelete: SetNull)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt()
  postDate        DateTime        @default(now())
  tags            Tag[]
  companyId       String?
  company         Company?        @relation(fields: [companyId], references: [id])
  authorId        String
  author          User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postTypeId      PostTypeEnum    @default(Page)
  postType        PostType        @relation(fields: [postTypeId], references: [id])

  @@index([postId, version])
}

model Tag {
  id           String        @id() @default(cuid())
  name         String        @unique()
  companyId    String
  company      Company       @relation(fields: [companyId], references: [id])
  posts        Post[]
  postVersions PostVersion[]

  @@index([companyId, name])
  @@index([companyId])
}

model Site {
  id         String         @id() @default(cuid())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt()
  metadatas  SiteMetadata[]
  settings   SiteSettings?
  currencyId CurrencyEnum   @default(MYR)
  domain     String         @default("example.com")
}

model SiteMetadata {
  name        String
  logoId      String?
  logo        Media?       @relation(name: "SiteMetadataLogo", fields: [logoId], references: [id])
  darkLogoId  String?
  darkLogo    Media?       @relation(name: "SiteMetadataDarkLogo", fields: [darkLogoId], references: [id])
  description String?
  siteId      String
  languageId  LanguageEnum
  site        Site         @relation(fields: [siteId], references: [id])

  @@id([siteId, languageId])
  @@unique([languageId])
}

model Carousel {
  id        String             @id() @default(cuid())
  title     String
  startDate DateTime
  endDate   DateTime
  status    CarouselStatusEnum @default(Active)
  sortOrder Int                @default(0)
  cta       Json
  metadatas CarouselMetadata[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt()

  @@index([startDate])
  @@index([endDate])
  @@index([status])
}

model CarouselMetadata {
  carouselId String
  carousel   Carousel     @relation(fields: [carouselId], references: [id])
  languageId LanguageEnum
  imageId    String
  image      Media        @relation(fields: [imageId], references: [id])

  @@id([carouselId, languageId])
}

model SiteSettings {
  id                     String   @id() @default(cuid())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt()
  siteId                 String   @unique()
  site                   Site     @relation(fields: [siteId], references: [id])
  googleAnalyticsId      String?
  googleTagManagerId     String?
  facebookPixelId        String?
  defaultMetaTitle       String?
  defaultMetaDescription String?
  sitemapUrl             String?
  robotsTxt              String?
  facebookUrl            String?
  twitterUrl             String?
  instagramUrl           String?
  linkedinUrl            String?
  contactEmail           String?
  supportEmail           String?
  phoneNumber            String?
  address                String?
  maintenanceMode        Boolean  @default(false)
  allowUserRegistration  Boolean  @default(true)
  enableComments         Boolean  @default(true)
  enableNewsletter       Boolean  @default(false)
}

model Form {
  id          String           @id() @default(cuid())
  name        String
  createdById String
  createdBy   User             @relation(fields: [createdById], references: [id], onDelete: Cascade)
  columns     FormColumn[]
  submissions FormSubmission[]
  actions     FormAction[]
  expiry      DateTime?
  companyId   String
  company     Company          @relation(fields: [companyId], references: [id])
  deleted     Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt()
}

model FormAction {
  id             String                      @id() @default(cuid())
  formId         String
  form           Form                        @relation(fields: [formId], references: [id])
  actionType     FORM_SUBMISSION_ACTION_ENUM
  nextActionId   String?                     @unique()
  nextAction     FormAction?                 @relation("nextAction", fields: [nextActionId], references: [id])
  previousAction FormAction?                 @relation("nextAction")
  data           Json
  createdAt      DateTime                    @default(now())
  updatedAt      DateTime                    @updatedAt()
}

model FormColumn {
  id               String                @id() @default(cuid())
  formId           String
  form             Form                  @relation(fields: [formId], references: [id])
  name             String
  description      String?
  required         Boolean               @default(false)
  type             FORM_COLUMN_TYPE_ENUM
  options          FormColumnOption[]
  submissionValues FormSubmissionValue[]
  order            Int
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt()
}

model FormColumnOption {
  id               String                 @id() @default(cuid())
  columnId         String
  column           FormColumn             @relation(fields: [columnId], references: [id])
  submissionValues FormSubmissionValue[]
  value            String
  order            Int                    @default(0)
  deleted          Boolean                @default(false)
  datas            FormColumnOptionData[]
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt()
}

model FormColumnOptionData {
  id        String                      @id() @default(cuid())
  optionId  String
  option    FormColumnOption            @relation(fields: [optionId], references: [id])
  values    FormColumnOptionDataValue[]
  name      String
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt()
}

model FormColumnOptionDataValue {
  id        String               @id() @default(cuid())
  dataId    String
  data      FormColumnOptionData @relation(fields: [dataId], references: [id])
  value     String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt()
}

model FormSubmission {
  id        String                   @id() @default(cuid())
  formId    String
  form      Form                     @relation(fields: [formId], references: [id])
  userId    String?
  user      User?                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  values    FormSubmissionValue[]
  approvals FormSubmissionApproval[]
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt()
}

model FormSubmissionValue {
  id             String            @id() @default(cuid())
  submissionId   String
  submission     FormSubmission    @relation(fields: [submissionId], references: [id])
  columnId       String
  column         FormColumn        @relation(fields: [columnId], references: [id])
  columnOptionId String?
  columnOption   FormColumnOption? @relation(fields: [columnOptionId], references: [id])
  value          String?
}

model FormSubmissionApproval {
  id                 String                    @id() @default(cuid())
  submissionId       String
  submission         FormSubmission            @relation(fields: [submissionId], references: [id])
  approverId         String?
  approver           User?                     @relation(fields: [approverId], references: [id], onDelete: Cascade)
  guestApproverName  String?
  guestApproverEmail String?
  guestToken         String?
  status             FORM_APPROVAL_STATUS_ENUM @default(Pending)
  approvedAt         DateTime                  @default(now())
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt()

  @@unique([submissionId, approverId, guestApproverEmail, guestApproverName])
  @@index([id, guestToken])
}

model EmailTemplate {
  id          String     @id() @default(cuid())
  name        String     @unique()
  subject     String
  htmlContent String     @db.Text()
  textContent String?    @db.Text()
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt()
  emails      EmailLog[]
}

model EmailLog {
  id               String                 @id() @default(cuid())
  templateId       String?
  template         EmailTemplate?         @relation(fields: [templateId], references: [id])
  emailAddress     String
  userId           String?
  user             User?                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject          String
  htmlContent      String                 @db.Text()
  textContent      String?                @db.Text()
  status           EmailStatusEnum        @default(PENDING)
  /// AWS SES Message ID or any other email service provider's message ID
  messageId        String?
  sentAt           DateTime?
  errorMessage     String?                @db.Text()
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt()
  retryCount       Int                    @default(0)
  bounceComplaints EmailBounceComplaint[]

  @@unique([messageId])
}

model EmailBounceComplaint {
  id           String                  @id() @default(cuid())
  emailAddress String
  emailLogId   String
  email        EmailLog                @relation(fields: [emailLogId], references: [id])
  type         BounceComplaintTypeEnum
  timestamp    DateTime                @default(now())

  @@unique([emailAddress])
}

model EmailSuppression {
  id           String              @id() @default(cuid())
  emailAddress String              @unique()
  reason       SuppressionTypeEnum
  createdAt    DateTime            @default(now())

  @@index([emailAddress])
}

model Page {
  id             String        @id() @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt()
  publishDate    DateTime      @default(now())
  slug           String        @unique()
  title          String
  content        String
  status         PageStatus    @default(DRAFT)
  description    String?
  versionHistory PageVersion[]
  companyId      String
  company        Company       @relation(fields: [companyId], references: [id])
}

model PageVersion {
  id          String     @id() @default(cuid())
  version     Int        @default(1)
  slug        String
  pageId      String
  page        Page       @relation(fields: [pageId], references: [id], onDelete: Cascade)
  title       String
  content     String
  status      PageStatus @default(DRAFT)
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt()
  publishDate DateTime   @default(now())
  companyId   String
  company     Company    @relation(fields: [companyId], references: [id])

  @@index([pageId, version])
}
