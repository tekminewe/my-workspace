/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation AdminUpdateAdvertiserCampaign(\n    $data: UpdateAdvertiserCampaignInput!\n  ) {\n    updateAdvertiserCampaign(data: $data) {\n      id\n      slug\n      statusId\n      metadatas {\n        languageId\n        name\n        description\n        banner {\n          id\n          url\n        }\n      }\n    }\n  }\n": typeof types.AdminUpdateAdvertiserCampaignDocument,
    "\n  mutation AdminUpdateAdvertiser($id: String!, $data: UpdateAdvertiserInput!) {\n    updateAdvertiser(id: $id, data: $data) {\n      id\n      name\n      slug\n      statusId\n      logo {\n        url\n      }\n      metadatas {\n        languageId\n        name\n        description\n      }\n      categories {\n        id\n        name\n        description\n      }\n    }\n  }\n": typeof types.AdminUpdateAdvertiserDocument,
    "\n  mutation AdminUpdateAdvertiserCommission(\n    $data: UpdateAdvertiserCommissionInput!\n  ) {\n    updateAdvertiserCommission(data: $data) {\n      id\n      commission\n      commissionRows {\n        id\n        name\n        commission\n        typeId\n        metadatas {\n          languageId\n          name\n        }\n      }\n      url\n      dayToValidate\n      dayToPayout\n    }\n  }\n": typeof types.AdminUpdateAdvertiserCommissionDocument,
    "\n  query AdminAdvertiserLogo($advertiserId: String!) {\n    advertiser(advertiserId: $advertiserId) {\n      id\n      name\n      logo {\n        url\n      }\n    }\n  }\n": typeof types.AdminAdvertiserLogoDocument,
    "\n  query AdminAdvertiserList(\n    $page: Int!\n    $pageSize: Int!\n    $sortBy: SortByField\n    $sortDirection: SortDirection\n  ) {\n    advertisers(\n      page: $page\n      pageSize: $pageSize\n      sortBy: $sortBy\n      sortDirection: $sortDirection\n    ) {\n      id\n      name\n      logo {\n        url\n      }\n      statusId\n      commission {\n        commission\n      }\n      categories {\n        id\n        name\n      }\n      createdAt\n    }\n    advertisersPagination(\n      page: $page\n      pageSize: $pageSize\n      sortBy: $sortBy\n      sortDirection: $sortDirection\n    ) {\n      totalItems\n      pageSize\n      currentPage\n    }\n  }\n": typeof types.AdminAdvertiserListDocument,
    "\n  query AdminAdvertiserCampaignList {\n    advertiserCampaigns {\n      id\n      advertiserId\n      providerId\n      providerReferenceId\n      startDate\n      endDate\n      statusId\n      name\n      banner {\n        url\n      }\n      advertiser {\n        id\n        name\n      }\n    }\n  }\n": typeof types.AdminAdvertiserCampaignListDocument,
    "\n  mutation AdminCreateCarousel($data: CreateCarouselInput!) {\n    createCarousel(data: $data) {\n      id\n      title\n      startDate\n      endDate\n      status\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserId\n          }\n        }\n      }\n      metadatas {\n        image {\n          id\n          url\n        }\n        languageId\n      }\n    }\n  }\n": typeof types.AdminCreateCarouselDocument,
    "\n  mutation AdminUpdateCarousel($id: String!, $data: UpdateCarouselInput!) {\n    updateCarousel(id: $id, data: $data) {\n      id\n      title\n      startDate\n      endDate\n      status\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserId\n          }\n        }\n      }\n      metadatas {\n        image {\n          id\n          url\n        }\n        languageId\n      }\n    }\n  }\n": typeof types.AdminUpdateCarouselDocument,
    "\n  query AdminPostDetail($id: String!) {\n    post(id: $id) {\n      id\n      title\n      content\n      postDate\n      slug\n      description\n      editorVersion\n      status {\n        id\n        name\n      }\n      tags {\n        id\n        name\n      }\n      featuredImage {\n        id\n        url\n      }\n      createdAt\n    }\n  }\n": typeof types.AdminPostDetailDocument,
    "\n  mutation AdminUpdatePost($id: String!, $data: UpdatePostInput!) {\n    updatePost(id: $id, data: $data) {\n      id\n      title\n      content\n      postDate\n      slug\n      description\n      editorVersion\n      status {\n        id\n        name\n      }\n      tags {\n        id\n        name\n      }\n      featuredImage {\n        id\n        url\n      }\n    }\n  }\n": typeof types.AdminUpdatePostDocument,
    "\n  query PostList($page: Int!, $pageSize: Int!) {\n    posts(page: $page, pageSize: $pageSize, statusId: \"Published\") {\n      id\n      title\n      content\n      slug\n      postDate\n      featuredImage {\n        url\n      }\n      tags {\n        name\n      }\n      editorVersion\n    }\n    postsPagination(page: $page, pageSize: $pageSize, statusId: \"Published\") {\n      totalItems\n      pageSize\n      nextPage\n      currentPage\n    }\n  }\n": typeof types.PostListDocument,
    "\n  query AdminPostListTableQuery($page: Int!, $pageSize: Int!) {\n    posts(page: $page, pageSize: $pageSize) {\n      id\n      title\n      postDate\n      slug\n      status {\n        id\n        name\n      }\n    }\n    postsPagination(page: $page, pageSize: $pageSize) {\n      totalItems\n      pageSize\n      currentPage\n    }\n  }\n": typeof types.AdminPostListTableQueryDocument,
    "\n  query Search($query: String!) {\n    searchAdvertisers(query: $query) {\n      id\n      name\n      categories\n      slug\n      logo\n      calculatedCommission\n    }\n  }\n": typeof types.SearchDocument,
    "\n  mutation CreateBonusType($input: CreateBonusTypeInput!) {\n    createBonusType(input: $input) {\n      id\n      codeId\n      version\n      priority\n      expiryDays\n      maxUsagePerUser\n      ruleConfig\n      statusId\n      effectiveFrom\n      effectiveTo\n      createdAt\n      updatedAt\n      createdBy\n      updatedBy\n      metadatas {\n        bonusTypeId\n        languageId\n        title\n        description\n        termsAndConditions\n        featuredImageId\n        logoId\n        featuredImage {\n          id\n          url\n          caption\n          mimeType\n        }\n        logo {\n          id\n          url\n          caption\n          mimeType\n        }\n      }\n    }\n  }\n": typeof types.CreateBonusTypeDocument,
    "\n  mutation UpdateBonusType($id: String!, $input: UpdateBonusTypeInput!) {\n    updateBonusType(id: $id, input: $input) {\n      id\n      codeId\n      version\n      priority\n      expiryDays\n      maxUsagePerUser\n      ruleConfig\n      statusId\n      effectiveFrom\n      effectiveTo\n      createdAt\n      updatedAt\n      createdBy\n      updatedBy\n      metadatas {\n        bonusTypeId\n        languageId\n        title\n        description\n        termsAndConditions\n        featuredImageId\n        logoId\n        featuredImage {\n          id\n          url\n          caption\n          mimeType\n        }\n        logo {\n          id\n          url\n          caption\n          mimeType\n        }\n      }\n    }\n  }\n": typeof types.UpdateBonusTypeDocument,
    "\n  mutation DeleteBonusType($id: String!) {\n    deleteBonusType(id: $id)\n  }\n": typeof types.DeleteBonusTypeDocument,
    "\n  query GetBonusTypes {\n    bonusTypes {\n      id\n      codeId\n      version\n      priority\n      expiryDays\n      maxUsagePerUser\n      ruleConfig\n      statusId\n      effectiveFrom\n      effectiveTo\n      createdAt\n      updatedAt\n      createdBy\n      updatedBy\n      \n    }\n  }\n": typeof types.GetBonusTypesDocument,
    "\n  query GetBonusType($id: String!) {\n    bonusType(id: $id) {\n      id\n      codeId\n      version\n      priority\n      expiryDays\n      maxUsagePerUser\n      ruleConfig\n      statusId\n      effectiveFrom\n      effectiveTo\n      createdAt\n      updatedAt\n      createdBy\n      updatedBy\n      \n    }\n  }\n": typeof types.GetBonusTypeDocument,
    "\n  query GetMyBonuses {\n    myBonuses {\n      id\n      userId\n      bonusTypeId\n      bonusVersion\n      statusId\n      availableAt\n      expiresAt\n      usedAt\n      eligibilityMetadata\n      createdAt\n      updatedAt\n      bonusType {\n        id\n        codeId\n        metadata {\n          title\n          description\n          termsAndConditions\n          logo {\n            id\n            url\n          }\n          featuredImage {\n            id\n            url\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetMyBonusesDocument,
    "\n  query GetMyBonusTransactions {\n    myBonusTransactions {\n      id\n      userId\n      bonusEligibilityId\n      bonusTypeId\n      bonusVersion\n      amount\n      currencyId\n      sourceTransactionId\n      merchantCallbackId\n      processedAt\n      walletTransactionId\n      processingMetadata\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetMyBonusTransactionsDocument,
    "\n  query GetMyBonusTransactionsPaginated($page: Int!, $pageSize: Int!) {\n    myBonusTransactionsPaginated(page: $page, pageSize: $pageSize) {\n      items {\n        id\n        userId\n        bonusEligibilityId\n        bonusTypeId\n        bonusVersion\n        amount\n        currencyId\n        sourceTransactionId\n        merchantCallbackId\n        processedAt\n        walletTransactionId\n        processingMetadata\n        createdAt\n        updatedAt\n        bonusEligibility {\n          bonusType {\n            id\n            codeId\n            metadata {\n              title\n              description\n            }\n          }\n        }\n      }\n      totalCount\n      page\n      pageSize\n    }\n  }\n": typeof types.GetMyBonusTransactionsPaginatedDocument,
    "\n    mutation AdminUpdateAdvertiserProviderReference(\n      $advertiserId: String!\n      $providerId: AffiliateProviderEnum!\n      $providerReferenceId: String!\n    ) {\n      updateAdvertiserProviderReference(\n        input: {\n          advertiserId: $advertiserId\n          providerId: $providerId\n          providerReferenceId: $providerReferenceId\n        }\n      ) {\n        advertiserId\n        providerId\n        providerReferenceId\n      }\n    }\n  ": typeof types.AdminUpdateAdvertiserProviderReferenceDocument,
    "\n  mutation FetchAdvertiser($data: FetchAdvertiserInput!) {\n    fetchAdvertiser(data: $data) {\n      success\n      advertiserName\n      slug\n      message\n    }\n  }\n": typeof types.FetchAdvertiserDocument,
    "\n  mutation GenerateImage($input: ImageGenerationInput!) {\n    generateImage(input: $input) {\n      success\n      imageUrl\n      imageBase64\n      prompt\n      provider\n      referenceImages\n      metadata {\n        model\n        size\n        seed\n        timings\n        hasNsfwConcepts\n      }\n      error\n    }\n  }\n": typeof types.GenerateImageDocument,
    "\n  mutation UpdateSite($input: UpdateSiteInput!) {\n    updateSite(input: $input) {\n      id\n      name\n      domain\n      description\n      logo {\n        id\n        url\n      }\n      metadatas {\n        name\n        description\n        logo {\n          id\n          url\n        }\n        darkLogo {\n          id\n          url\n        }\n        languageId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateSiteDocument,
    "\n  mutation UploadMedia($data: UploadMediaInput!) {\n    uploadMedia(data: $data) {\n      id\n      url\n      mimeType\n      caption\n      createdAt\n    }\n  }\n": typeof types.UploadMediaDocument,
    "\n  query AdminAdvertiserCampaignDetailPageQuery(\n    $id: String!\n    $isSupported: Boolean\n  ) {\n    advertiserCampaign(id: $id) {\n      id\n      slug\n      statusId\n      advertiserId\n      providerId\n      providerReferenceId\n      startDate\n      endDate\n      url\n      metadatas {\n        languageId\n        name\n        description\n        banner {\n          id\n          url\n        }\n      }\n    }\n    languages(isSupported: $isSupported) {\n      id\n      name\n      code\n    }\n  }\n": typeof types.AdminAdvertiserCampaignDetailPageQueryDocument,
    "\n  query AdminAdvertiserMultiCommissionsQuery($id: String!) {\n    advertiser(advertiserId: $id) {\n      id\n      name\n      slug\n      logo {\n        id\n        url\n      }\n      statusId\n      metadatas {\n        languageId\n        name\n        description\n      }\n      commissions {\n        id\n        dayToValidate\n        dayToPayout\n        url\n        statusId\n        providerId\n        commissionRows {\n          id\n          commission\n          typeId\n          statusId\n          providerReferenceId\n          metadatas {\n            languageId\n            name\n          }\n        }\n      }\n      providerReferences {\n        providerId\n        providerReferenceId\n      }\n      categories {\n        id\n        name\n        description\n      }\n    }\n  }\n": typeof types.AdminAdvertiserMultiCommissionsQueryDocument,
    "\n  query AdminCarouselDetailPageQuery($id: String!) {\n    carousel(id: $id) {\n      id\n      title\n      startDate\n      endDate\n      status\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserId\n          }\n        }\n      }\n      metadatas {\n        image {\n          id\n          url\n        }\n        languageId\n      }\n    }\n  }\n": typeof types.AdminCarouselDetailPageQueryDocument,
    "\n  query EditCarouselQuery(\n    $id: String!\n    $page: Int!\n    $pageSize: Int!\n    $statusId: String\n  ) {\n    carousel(id: $id) {\n      id\n      title\n      startDate\n      endDate\n      status\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserId\n          }\n        }\n      }\n      metadatas {\n        image {\n          id\n          url\n        }\n        languageId\n      }\n    }\n    languages(isSupported: true) {\n      id\n      name\n    }\n    advertisers(page: $page, pageSize: $pageSize, statusId: $statusId) {\n      id\n      name\n      slug\n      description\n      logo {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n    advertisersPagination(\n      page: $page\n      pageSize: $pageSize\n      statusId: $statusId\n    ) {\n      totalItems\n      totalPages\n    }\n  }\n": typeof types.EditCarouselQueryDocument,
    "\n  query GetAdminCarouselList($page: Int!, $pageSize: Int!) {\n    carousels(page: $page, pageSize: $pageSize) {\n      id\n      title\n      startDate\n      endDate\n      status\n      image {\n        id\n        url\n      }\n    }\n    carouselsPagination(page: $page, pageSize: $pageSize) {\n      totalItems\n      pageSize\n      currentPage\n    }\n  }\n": typeof types.GetAdminCarouselListDocument,
    "\n  query GetAdvertiserCategories {\n    advertiserCategories {\n      id\n      name\n      description\n    }\n  }\n": typeof types.GetAdvertiserCategoriesDocument,
    "\n  query GetAllAdvertisers(\n    $page: Int!\n    $pageSize: Int!\n    $statusId: String\n    $categoryIds: [AdvertiserCategoryEnum!]\n  ) {\n    advertisers(\n      page: $page\n      pageSize: $pageSize\n      statusId: $statusId\n      categoryIds: $categoryIds\n    ) {\n      id\n      name\n      slug\n      logo {\n        id\n        url\n      }\n      categories {\n        id\n        name\n        description\n      }\n      commission(statusId: Active, rowStatusId: Active) {\n        calculatedCommission\n      }\n    }\n    advertisersPagination(\n      page: $page\n      pageSize: $pageSize\n      statusId: $statusId\n      categoryIds: $categoryIds\n    ) {\n      nextPage\n      currentPage\n    }\n  }\n": typeof types.GetAllAdvertisersDocument,
    "\n  query GetHome {\n    carousels(page: 1, pageSize: 10, status: \"Active\") {\n      id\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserSlug\n            advertiserRedirectUrl\n            advertiserName\n            advertiserLogoUrl\n            advertiserCashbackRate\n          }\n        }\n      }\n      image {\n        id\n        url\n      }\n    }\n  }\n": typeof types.GetHomeDocument,
    "\n  query GetSiteAdmin {\n    site {\n      id\n      name\n      domain\n      description\n      logo {\n        id\n        url\n      }\n      metadatas {\n        name\n        description\n        logo {\n          id\n          url\n        }\n        darkLogo {\n          id\n          url\n        }\n        languageId\n      }\n      createdAt\n      updatedAt\n    }\n    languages(isSupported: true) {\n      id\n      name\n      code\n      shortName\n      isSupported\n      isDefault\n    }\n  }\n": typeof types.GetSiteAdminDocument,
    "\n  query GetSiteAndAdvertiser($slug: String!) {\n    site {\n      id\n      name\n      domain\n      description\n      logo {\n        url\n      }\n      createdAt\n      updatedAt\n    }\n    advertiser(slug: $slug) {\n      id\n      name\n      slug\n      description\n      statusId\n      createdAt\n      updatedAt\n      logo {\n        id\n        url\n      }\n      commission {\n        calculatedCommission\n        dayToValidate\n        dayToPayout\n        url\n      }\n    }\n  }\n": typeof types.GetSiteAndAdvertiserDocument,
    "\n  query GetSiteAndAdvertisers($page: Int!, $pageSize: Int!, $statusId: String) {\n    languages(isSupported: true) {\n      id\n      name\n    }\n    advertisers(page: $page, pageSize: $pageSize, statusId: $statusId) {\n      id\n      name\n      slug\n      description\n      logo {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n    advertisersPagination(\n      page: $page\n      pageSize: $pageSize\n      statusId: $statusId\n    ) {\n      totalItems\n      totalPages\n    }\n  }\n": typeof types.GetSiteAndAdvertisersDocument,
    "\n  query GetSiteWithMetadata {\n    site {\n      id\n      name\n      domain\n      description\n      logo {\n        id\n        url\n      }\n      metadatas {\n        name\n        description\n        logo {\n          id\n          url\n        }\n        darkLogo {\n          id\n          url\n        }\n        languageId\n      }\n      createdAt\n      updatedAt\n    }\n    languages(isSupported: true) {\n      id\n      name\n      code\n      shortName\n      isSupported\n      isDefault\n    }\n  }\n": typeof types.GetSiteWithMetadataDocument,
    "\n  query GetSite {\n    site {\n      id\n      name\n      domain\n      description\n      logo {\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetSiteDocument,
    "\n  query GetSupportedLanguages {\n    languages(isSupported: true) {\n      id\n      name\n      code\n      shortName\n      isSupported\n      isDefault\n    }\n  }\n": typeof types.GetSupportedLanguagesDocument,
    "\n  query PostDetail($slug: String!) {\n    post(slug: $slug) {\n      id\n      title\n      content\n      description\n      slug\n      postDate\n      createdAt\n      updatedAt\n      featuredImage {\n        url\n      }\n      tags {\n        name\n      }\n      editorVersion\n    }\n  }\n": typeof types.PostDetailDocument,
    "\n  query PostListSitemap {\n    posts(pageSize: 5000, statusId: \"Published\") {\n      id\n      title\n      postDate\n      slug\n      updatedAt\n    }\n  }\n": typeof types.PostListSitemapDocument,
    "\n  mutation RefreshAdvertiserSearchIndex(\n    $data: RefreshAdvertiserSearchIndexInput!\n  ) {\n    refreshAdvertiserSearchIndex(data: $data) {\n      success\n    }\n  }\n": typeof types.RefreshAdvertiserSearchIndexDocument,
    "\n  query GetSiteSettings {\n    siteSettings {\n      id\n      siteId\n      googleAnalyticsId\n      googleTagManagerId\n      facebookPixelId\n      defaultMetaTitle\n      defaultMetaDescription\n      sitemapUrl\n      robotsTxt\n      facebookUrl\n      twitterUrl\n      instagramUrl\n      linkedinUrl\n      contactEmail\n      supportEmail\n      phoneNumber\n      address\n      maintenanceMode\n      allowUserRegistration\n      enableComments\n      enableNewsletter\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetSiteSettingsDocument,
    "\n  mutation UpdateSiteSettings($input: UpdateSiteSettingsInput!) {\n    updateSiteSettings(input: $input) {\n      id\n      siteId\n      googleAnalyticsId\n      googleTagManagerId\n      facebookPixelId\n      defaultMetaTitle\n      defaultMetaDescription\n      sitemapUrl\n      robotsTxt\n      facebookUrl\n      twitterUrl\n      instagramUrl\n      linkedinUrl\n      contactEmail\n      supportEmail\n      phoneNumber\n      address\n      maintenanceMode\n      allowUserRegistration\n      enableComments\n      enableNewsletter\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateSiteSettingsDocument,
    "\n  query AdvertiserCategoriesWithCounts {\n    advertiserCategoriesWithCounts {\n      id\n      name\n      description\n      count\n    }\n  }\n": typeof types.AdvertiserCategoriesWithCountsDocument,
    "\n  query GetAdvertiserBySlug(\n    $slug: String!\n    $endDateGt: DateTime!\n    $campaignStatusId: AdvertiserCampaignStatusEnum!\n  ) {\n    advertiser(slug: $slug) {\n      id\n      name\n      slug\n      description\n      statusId\n      createdAt\n      updatedAt\n      logo {\n        id\n        url\n      }\n      categories {\n        id\n        name\n      }\n      commission(statusId: Active, rowStatusId: Active) {\n        calculatedCommission\n        dayToValidate\n        dayToPayout\n        url\n        commissionRows {\n          id\n          name\n          calculatedCommission\n          typeId\n        }\n      }\n    }\n    advertiserCampaigns(\n      advertiserSlug: $slug\n      endDateGt: $endDateGt\n      statusId: $campaignStatusId\n    ) {\n      id\n      name\n      startDate\n      endDate\n      description\n      voucherCodes\n      url\n      banner {\n        url\n      }\n    }\n  }\n": typeof types.GetAdvertiserBySlugDocument,
};
const documents: Documents = {
    "\n  mutation AdminUpdateAdvertiserCampaign(\n    $data: UpdateAdvertiserCampaignInput!\n  ) {\n    updateAdvertiserCampaign(data: $data) {\n      id\n      slug\n      statusId\n      metadatas {\n        languageId\n        name\n        description\n        banner {\n          id\n          url\n        }\n      }\n    }\n  }\n": types.AdminUpdateAdvertiserCampaignDocument,
    "\n  mutation AdminUpdateAdvertiser($id: String!, $data: UpdateAdvertiserInput!) {\n    updateAdvertiser(id: $id, data: $data) {\n      id\n      name\n      slug\n      statusId\n      logo {\n        url\n      }\n      metadatas {\n        languageId\n        name\n        description\n      }\n      categories {\n        id\n        name\n        description\n      }\n    }\n  }\n": types.AdminUpdateAdvertiserDocument,
    "\n  mutation AdminUpdateAdvertiserCommission(\n    $data: UpdateAdvertiserCommissionInput!\n  ) {\n    updateAdvertiserCommission(data: $data) {\n      id\n      commission\n      commissionRows {\n        id\n        name\n        commission\n        typeId\n        metadatas {\n          languageId\n          name\n        }\n      }\n      url\n      dayToValidate\n      dayToPayout\n    }\n  }\n": types.AdminUpdateAdvertiserCommissionDocument,
    "\n  query AdminAdvertiserLogo($advertiserId: String!) {\n    advertiser(advertiserId: $advertiserId) {\n      id\n      name\n      logo {\n        url\n      }\n    }\n  }\n": types.AdminAdvertiserLogoDocument,
    "\n  query AdminAdvertiserList(\n    $page: Int!\n    $pageSize: Int!\n    $sortBy: SortByField\n    $sortDirection: SortDirection\n  ) {\n    advertisers(\n      page: $page\n      pageSize: $pageSize\n      sortBy: $sortBy\n      sortDirection: $sortDirection\n    ) {\n      id\n      name\n      logo {\n        url\n      }\n      statusId\n      commission {\n        commission\n      }\n      categories {\n        id\n        name\n      }\n      createdAt\n    }\n    advertisersPagination(\n      page: $page\n      pageSize: $pageSize\n      sortBy: $sortBy\n      sortDirection: $sortDirection\n    ) {\n      totalItems\n      pageSize\n      currentPage\n    }\n  }\n": types.AdminAdvertiserListDocument,
    "\n  query AdminAdvertiserCampaignList {\n    advertiserCampaigns {\n      id\n      advertiserId\n      providerId\n      providerReferenceId\n      startDate\n      endDate\n      statusId\n      name\n      banner {\n        url\n      }\n      advertiser {\n        id\n        name\n      }\n    }\n  }\n": types.AdminAdvertiserCampaignListDocument,
    "\n  mutation AdminCreateCarousel($data: CreateCarouselInput!) {\n    createCarousel(data: $data) {\n      id\n      title\n      startDate\n      endDate\n      status\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserId\n          }\n        }\n      }\n      metadatas {\n        image {\n          id\n          url\n        }\n        languageId\n      }\n    }\n  }\n": types.AdminCreateCarouselDocument,
    "\n  mutation AdminUpdateCarousel($id: String!, $data: UpdateCarouselInput!) {\n    updateCarousel(id: $id, data: $data) {\n      id\n      title\n      startDate\n      endDate\n      status\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserId\n          }\n        }\n      }\n      metadatas {\n        image {\n          id\n          url\n        }\n        languageId\n      }\n    }\n  }\n": types.AdminUpdateCarouselDocument,
    "\n  query AdminPostDetail($id: String!) {\n    post(id: $id) {\n      id\n      title\n      content\n      postDate\n      slug\n      description\n      editorVersion\n      status {\n        id\n        name\n      }\n      tags {\n        id\n        name\n      }\n      featuredImage {\n        id\n        url\n      }\n      createdAt\n    }\n  }\n": types.AdminPostDetailDocument,
    "\n  mutation AdminUpdatePost($id: String!, $data: UpdatePostInput!) {\n    updatePost(id: $id, data: $data) {\n      id\n      title\n      content\n      postDate\n      slug\n      description\n      editorVersion\n      status {\n        id\n        name\n      }\n      tags {\n        id\n        name\n      }\n      featuredImage {\n        id\n        url\n      }\n    }\n  }\n": types.AdminUpdatePostDocument,
    "\n  query PostList($page: Int!, $pageSize: Int!) {\n    posts(page: $page, pageSize: $pageSize, statusId: \"Published\") {\n      id\n      title\n      content\n      slug\n      postDate\n      featuredImage {\n        url\n      }\n      tags {\n        name\n      }\n      editorVersion\n    }\n    postsPagination(page: $page, pageSize: $pageSize, statusId: \"Published\") {\n      totalItems\n      pageSize\n      nextPage\n      currentPage\n    }\n  }\n": types.PostListDocument,
    "\n  query AdminPostListTableQuery($page: Int!, $pageSize: Int!) {\n    posts(page: $page, pageSize: $pageSize) {\n      id\n      title\n      postDate\n      slug\n      status {\n        id\n        name\n      }\n    }\n    postsPagination(page: $page, pageSize: $pageSize) {\n      totalItems\n      pageSize\n      currentPage\n    }\n  }\n": types.AdminPostListTableQueryDocument,
    "\n  query Search($query: String!) {\n    searchAdvertisers(query: $query) {\n      id\n      name\n      categories\n      slug\n      logo\n      calculatedCommission\n    }\n  }\n": types.SearchDocument,
    "\n  mutation CreateBonusType($input: CreateBonusTypeInput!) {\n    createBonusType(input: $input) {\n      id\n      codeId\n      version\n      priority\n      expiryDays\n      maxUsagePerUser\n      ruleConfig\n      statusId\n      effectiveFrom\n      effectiveTo\n      createdAt\n      updatedAt\n      createdBy\n      updatedBy\n      metadatas {\n        bonusTypeId\n        languageId\n        title\n        description\n        termsAndConditions\n        featuredImageId\n        logoId\n        featuredImage {\n          id\n          url\n          caption\n          mimeType\n        }\n        logo {\n          id\n          url\n          caption\n          mimeType\n        }\n      }\n    }\n  }\n": types.CreateBonusTypeDocument,
    "\n  mutation UpdateBonusType($id: String!, $input: UpdateBonusTypeInput!) {\n    updateBonusType(id: $id, input: $input) {\n      id\n      codeId\n      version\n      priority\n      expiryDays\n      maxUsagePerUser\n      ruleConfig\n      statusId\n      effectiveFrom\n      effectiveTo\n      createdAt\n      updatedAt\n      createdBy\n      updatedBy\n      metadatas {\n        bonusTypeId\n        languageId\n        title\n        description\n        termsAndConditions\n        featuredImageId\n        logoId\n        featuredImage {\n          id\n          url\n          caption\n          mimeType\n        }\n        logo {\n          id\n          url\n          caption\n          mimeType\n        }\n      }\n    }\n  }\n": types.UpdateBonusTypeDocument,
    "\n  mutation DeleteBonusType($id: String!) {\n    deleteBonusType(id: $id)\n  }\n": types.DeleteBonusTypeDocument,
    "\n  query GetBonusTypes {\n    bonusTypes {\n      id\n      codeId\n      version\n      priority\n      expiryDays\n      maxUsagePerUser\n      ruleConfig\n      statusId\n      effectiveFrom\n      effectiveTo\n      createdAt\n      updatedAt\n      createdBy\n      updatedBy\n      \n    }\n  }\n": types.GetBonusTypesDocument,
    "\n  query GetBonusType($id: String!) {\n    bonusType(id: $id) {\n      id\n      codeId\n      version\n      priority\n      expiryDays\n      maxUsagePerUser\n      ruleConfig\n      statusId\n      effectiveFrom\n      effectiveTo\n      createdAt\n      updatedAt\n      createdBy\n      updatedBy\n      \n    }\n  }\n": types.GetBonusTypeDocument,
    "\n  query GetMyBonuses {\n    myBonuses {\n      id\n      userId\n      bonusTypeId\n      bonusVersion\n      statusId\n      availableAt\n      expiresAt\n      usedAt\n      eligibilityMetadata\n      createdAt\n      updatedAt\n      bonusType {\n        id\n        codeId\n        metadata {\n          title\n          description\n          termsAndConditions\n          logo {\n            id\n            url\n          }\n          featuredImage {\n            id\n            url\n          }\n        }\n      }\n    }\n  }\n": types.GetMyBonusesDocument,
    "\n  query GetMyBonusTransactions {\n    myBonusTransactions {\n      id\n      userId\n      bonusEligibilityId\n      bonusTypeId\n      bonusVersion\n      amount\n      currencyId\n      sourceTransactionId\n      merchantCallbackId\n      processedAt\n      walletTransactionId\n      processingMetadata\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetMyBonusTransactionsDocument,
    "\n  query GetMyBonusTransactionsPaginated($page: Int!, $pageSize: Int!) {\n    myBonusTransactionsPaginated(page: $page, pageSize: $pageSize) {\n      items {\n        id\n        userId\n        bonusEligibilityId\n        bonusTypeId\n        bonusVersion\n        amount\n        currencyId\n        sourceTransactionId\n        merchantCallbackId\n        processedAt\n        walletTransactionId\n        processingMetadata\n        createdAt\n        updatedAt\n        bonusEligibility {\n          bonusType {\n            id\n            codeId\n            metadata {\n              title\n              description\n            }\n          }\n        }\n      }\n      totalCount\n      page\n      pageSize\n    }\n  }\n": types.GetMyBonusTransactionsPaginatedDocument,
    "\n    mutation AdminUpdateAdvertiserProviderReference(\n      $advertiserId: String!\n      $providerId: AffiliateProviderEnum!\n      $providerReferenceId: String!\n    ) {\n      updateAdvertiserProviderReference(\n        input: {\n          advertiserId: $advertiserId\n          providerId: $providerId\n          providerReferenceId: $providerReferenceId\n        }\n      ) {\n        advertiserId\n        providerId\n        providerReferenceId\n      }\n    }\n  ": types.AdminUpdateAdvertiserProviderReferenceDocument,
    "\n  mutation FetchAdvertiser($data: FetchAdvertiserInput!) {\n    fetchAdvertiser(data: $data) {\n      success\n      advertiserName\n      slug\n      message\n    }\n  }\n": types.FetchAdvertiserDocument,
    "\n  mutation GenerateImage($input: ImageGenerationInput!) {\n    generateImage(input: $input) {\n      success\n      imageUrl\n      imageBase64\n      prompt\n      provider\n      referenceImages\n      metadata {\n        model\n        size\n        seed\n        timings\n        hasNsfwConcepts\n      }\n      error\n    }\n  }\n": types.GenerateImageDocument,
    "\n  mutation UpdateSite($input: UpdateSiteInput!) {\n    updateSite(input: $input) {\n      id\n      name\n      domain\n      description\n      logo {\n        id\n        url\n      }\n      metadatas {\n        name\n        description\n        logo {\n          id\n          url\n        }\n        darkLogo {\n          id\n          url\n        }\n        languageId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateSiteDocument,
    "\n  mutation UploadMedia($data: UploadMediaInput!) {\n    uploadMedia(data: $data) {\n      id\n      url\n      mimeType\n      caption\n      createdAt\n    }\n  }\n": types.UploadMediaDocument,
    "\n  query AdminAdvertiserCampaignDetailPageQuery(\n    $id: String!\n    $isSupported: Boolean\n  ) {\n    advertiserCampaign(id: $id) {\n      id\n      slug\n      statusId\n      advertiserId\n      providerId\n      providerReferenceId\n      startDate\n      endDate\n      url\n      metadatas {\n        languageId\n        name\n        description\n        banner {\n          id\n          url\n        }\n      }\n    }\n    languages(isSupported: $isSupported) {\n      id\n      name\n      code\n    }\n  }\n": types.AdminAdvertiserCampaignDetailPageQueryDocument,
    "\n  query AdminAdvertiserMultiCommissionsQuery($id: String!) {\n    advertiser(advertiserId: $id) {\n      id\n      name\n      slug\n      logo {\n        id\n        url\n      }\n      statusId\n      metadatas {\n        languageId\n        name\n        description\n      }\n      commissions {\n        id\n        dayToValidate\n        dayToPayout\n        url\n        statusId\n        providerId\n        commissionRows {\n          id\n          commission\n          typeId\n          statusId\n          providerReferenceId\n          metadatas {\n            languageId\n            name\n          }\n        }\n      }\n      providerReferences {\n        providerId\n        providerReferenceId\n      }\n      categories {\n        id\n        name\n        description\n      }\n    }\n  }\n": types.AdminAdvertiserMultiCommissionsQueryDocument,
    "\n  query AdminCarouselDetailPageQuery($id: String!) {\n    carousel(id: $id) {\n      id\n      title\n      startDate\n      endDate\n      status\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserId\n          }\n        }\n      }\n      metadatas {\n        image {\n          id\n          url\n        }\n        languageId\n      }\n    }\n  }\n": types.AdminCarouselDetailPageQueryDocument,
    "\n  query EditCarouselQuery(\n    $id: String!\n    $page: Int!\n    $pageSize: Int!\n    $statusId: String\n  ) {\n    carousel(id: $id) {\n      id\n      title\n      startDate\n      endDate\n      status\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserId\n          }\n        }\n      }\n      metadatas {\n        image {\n          id\n          url\n        }\n        languageId\n      }\n    }\n    languages(isSupported: true) {\n      id\n      name\n    }\n    advertisers(page: $page, pageSize: $pageSize, statusId: $statusId) {\n      id\n      name\n      slug\n      description\n      logo {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n    advertisersPagination(\n      page: $page\n      pageSize: $pageSize\n      statusId: $statusId\n    ) {\n      totalItems\n      totalPages\n    }\n  }\n": types.EditCarouselQueryDocument,
    "\n  query GetAdminCarouselList($page: Int!, $pageSize: Int!) {\n    carousels(page: $page, pageSize: $pageSize) {\n      id\n      title\n      startDate\n      endDate\n      status\n      image {\n        id\n        url\n      }\n    }\n    carouselsPagination(page: $page, pageSize: $pageSize) {\n      totalItems\n      pageSize\n      currentPage\n    }\n  }\n": types.GetAdminCarouselListDocument,
    "\n  query GetAdvertiserCategories {\n    advertiserCategories {\n      id\n      name\n      description\n    }\n  }\n": types.GetAdvertiserCategoriesDocument,
    "\n  query GetAllAdvertisers(\n    $page: Int!\n    $pageSize: Int!\n    $statusId: String\n    $categoryIds: [AdvertiserCategoryEnum!]\n  ) {\n    advertisers(\n      page: $page\n      pageSize: $pageSize\n      statusId: $statusId\n      categoryIds: $categoryIds\n    ) {\n      id\n      name\n      slug\n      logo {\n        id\n        url\n      }\n      categories {\n        id\n        name\n        description\n      }\n      commission(statusId: Active, rowStatusId: Active) {\n        calculatedCommission\n      }\n    }\n    advertisersPagination(\n      page: $page\n      pageSize: $pageSize\n      statusId: $statusId\n      categoryIds: $categoryIds\n    ) {\n      nextPage\n      currentPage\n    }\n  }\n": types.GetAllAdvertisersDocument,
    "\n  query GetHome {\n    carousels(page: 1, pageSize: 10, status: \"Active\") {\n      id\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserSlug\n            advertiserRedirectUrl\n            advertiserName\n            advertiserLogoUrl\n            advertiserCashbackRate\n          }\n        }\n      }\n      image {\n        id\n        url\n      }\n    }\n  }\n": types.GetHomeDocument,
    "\n  query GetSiteAdmin {\n    site {\n      id\n      name\n      domain\n      description\n      logo {\n        id\n        url\n      }\n      metadatas {\n        name\n        description\n        logo {\n          id\n          url\n        }\n        darkLogo {\n          id\n          url\n        }\n        languageId\n      }\n      createdAt\n      updatedAt\n    }\n    languages(isSupported: true) {\n      id\n      name\n      code\n      shortName\n      isSupported\n      isDefault\n    }\n  }\n": types.GetSiteAdminDocument,
    "\n  query GetSiteAndAdvertiser($slug: String!) {\n    site {\n      id\n      name\n      domain\n      description\n      logo {\n        url\n      }\n      createdAt\n      updatedAt\n    }\n    advertiser(slug: $slug) {\n      id\n      name\n      slug\n      description\n      statusId\n      createdAt\n      updatedAt\n      logo {\n        id\n        url\n      }\n      commission {\n        calculatedCommission\n        dayToValidate\n        dayToPayout\n        url\n      }\n    }\n  }\n": types.GetSiteAndAdvertiserDocument,
    "\n  query GetSiteAndAdvertisers($page: Int!, $pageSize: Int!, $statusId: String) {\n    languages(isSupported: true) {\n      id\n      name\n    }\n    advertisers(page: $page, pageSize: $pageSize, statusId: $statusId) {\n      id\n      name\n      slug\n      description\n      logo {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n    advertisersPagination(\n      page: $page\n      pageSize: $pageSize\n      statusId: $statusId\n    ) {\n      totalItems\n      totalPages\n    }\n  }\n": types.GetSiteAndAdvertisersDocument,
    "\n  query GetSiteWithMetadata {\n    site {\n      id\n      name\n      domain\n      description\n      logo {\n        id\n        url\n      }\n      metadatas {\n        name\n        description\n        logo {\n          id\n          url\n        }\n        darkLogo {\n          id\n          url\n        }\n        languageId\n      }\n      createdAt\n      updatedAt\n    }\n    languages(isSupported: true) {\n      id\n      name\n      code\n      shortName\n      isSupported\n      isDefault\n    }\n  }\n": types.GetSiteWithMetadataDocument,
    "\n  query GetSite {\n    site {\n      id\n      name\n      domain\n      description\n      logo {\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetSiteDocument,
    "\n  query GetSupportedLanguages {\n    languages(isSupported: true) {\n      id\n      name\n      code\n      shortName\n      isSupported\n      isDefault\n    }\n  }\n": types.GetSupportedLanguagesDocument,
    "\n  query PostDetail($slug: String!) {\n    post(slug: $slug) {\n      id\n      title\n      content\n      description\n      slug\n      postDate\n      createdAt\n      updatedAt\n      featuredImage {\n        url\n      }\n      tags {\n        name\n      }\n      editorVersion\n    }\n  }\n": types.PostDetailDocument,
    "\n  query PostListSitemap {\n    posts(pageSize: 5000, statusId: \"Published\") {\n      id\n      title\n      postDate\n      slug\n      updatedAt\n    }\n  }\n": types.PostListSitemapDocument,
    "\n  mutation RefreshAdvertiserSearchIndex(\n    $data: RefreshAdvertiserSearchIndexInput!\n  ) {\n    refreshAdvertiserSearchIndex(data: $data) {\n      success\n    }\n  }\n": types.RefreshAdvertiserSearchIndexDocument,
    "\n  query GetSiteSettings {\n    siteSettings {\n      id\n      siteId\n      googleAnalyticsId\n      googleTagManagerId\n      facebookPixelId\n      defaultMetaTitle\n      defaultMetaDescription\n      sitemapUrl\n      robotsTxt\n      facebookUrl\n      twitterUrl\n      instagramUrl\n      linkedinUrl\n      contactEmail\n      supportEmail\n      phoneNumber\n      address\n      maintenanceMode\n      allowUserRegistration\n      enableComments\n      enableNewsletter\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetSiteSettingsDocument,
    "\n  mutation UpdateSiteSettings($input: UpdateSiteSettingsInput!) {\n    updateSiteSettings(input: $input) {\n      id\n      siteId\n      googleAnalyticsId\n      googleTagManagerId\n      facebookPixelId\n      defaultMetaTitle\n      defaultMetaDescription\n      sitemapUrl\n      robotsTxt\n      facebookUrl\n      twitterUrl\n      instagramUrl\n      linkedinUrl\n      contactEmail\n      supportEmail\n      phoneNumber\n      address\n      maintenanceMode\n      allowUserRegistration\n      enableComments\n      enableNewsletter\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateSiteSettingsDocument,
    "\n  query AdvertiserCategoriesWithCounts {\n    advertiserCategoriesWithCounts {\n      id\n      name\n      description\n      count\n    }\n  }\n": types.AdvertiserCategoriesWithCountsDocument,
    "\n  query GetAdvertiserBySlug(\n    $slug: String!\n    $endDateGt: DateTime!\n    $campaignStatusId: AdvertiserCampaignStatusEnum!\n  ) {\n    advertiser(slug: $slug) {\n      id\n      name\n      slug\n      description\n      statusId\n      createdAt\n      updatedAt\n      logo {\n        id\n        url\n      }\n      categories {\n        id\n        name\n      }\n      commission(statusId: Active, rowStatusId: Active) {\n        calculatedCommission\n        dayToValidate\n        dayToPayout\n        url\n        commissionRows {\n          id\n          name\n          calculatedCommission\n          typeId\n        }\n      }\n    }\n    advertiserCampaigns(\n      advertiserSlug: $slug\n      endDateGt: $endDateGt\n      statusId: $campaignStatusId\n    ) {\n      id\n      name\n      startDate\n      endDate\n      description\n      voucherCodes\n      url\n      banner {\n        url\n      }\n    }\n  }\n": types.GetAdvertiserBySlugDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AdminUpdateAdvertiserCampaign(\n    $data: UpdateAdvertiserCampaignInput!\n  ) {\n    updateAdvertiserCampaign(data: $data) {\n      id\n      slug\n      statusId\n      metadatas {\n        languageId\n        name\n        description\n        banner {\n          id\n          url\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AdminUpdateAdvertiserCampaign(\n    $data: UpdateAdvertiserCampaignInput!\n  ) {\n    updateAdvertiserCampaign(data: $data) {\n      id\n      slug\n      statusId\n      metadatas {\n        languageId\n        name\n        description\n        banner {\n          id\n          url\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AdminUpdateAdvertiser($id: String!, $data: UpdateAdvertiserInput!) {\n    updateAdvertiser(id: $id, data: $data) {\n      id\n      name\n      slug\n      statusId\n      logo {\n        url\n      }\n      metadatas {\n        languageId\n        name\n        description\n      }\n      categories {\n        id\n        name\n        description\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AdminUpdateAdvertiser($id: String!, $data: UpdateAdvertiserInput!) {\n    updateAdvertiser(id: $id, data: $data) {\n      id\n      name\n      slug\n      statusId\n      logo {\n        url\n      }\n      metadatas {\n        languageId\n        name\n        description\n      }\n      categories {\n        id\n        name\n        description\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AdminUpdateAdvertiserCommission(\n    $data: UpdateAdvertiserCommissionInput!\n  ) {\n    updateAdvertiserCommission(data: $data) {\n      id\n      commission\n      commissionRows {\n        id\n        name\n        commission\n        typeId\n        metadatas {\n          languageId\n          name\n        }\n      }\n      url\n      dayToValidate\n      dayToPayout\n    }\n  }\n"): (typeof documents)["\n  mutation AdminUpdateAdvertiserCommission(\n    $data: UpdateAdvertiserCommissionInput!\n  ) {\n    updateAdvertiserCommission(data: $data) {\n      id\n      commission\n      commissionRows {\n        id\n        name\n        commission\n        typeId\n        metadatas {\n          languageId\n          name\n        }\n      }\n      url\n      dayToValidate\n      dayToPayout\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdminAdvertiserLogo($advertiserId: String!) {\n    advertiser(advertiserId: $advertiserId) {\n      id\n      name\n      logo {\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  query AdminAdvertiserLogo($advertiserId: String!) {\n    advertiser(advertiserId: $advertiserId) {\n      id\n      name\n      logo {\n        url\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdminAdvertiserList(\n    $page: Int!\n    $pageSize: Int!\n    $sortBy: SortByField\n    $sortDirection: SortDirection\n  ) {\n    advertisers(\n      page: $page\n      pageSize: $pageSize\n      sortBy: $sortBy\n      sortDirection: $sortDirection\n    ) {\n      id\n      name\n      logo {\n        url\n      }\n      statusId\n      commission {\n        commission\n      }\n      categories {\n        id\n        name\n      }\n      createdAt\n    }\n    advertisersPagination(\n      page: $page\n      pageSize: $pageSize\n      sortBy: $sortBy\n      sortDirection: $sortDirection\n    ) {\n      totalItems\n      pageSize\n      currentPage\n    }\n  }\n"): (typeof documents)["\n  query AdminAdvertiserList(\n    $page: Int!\n    $pageSize: Int!\n    $sortBy: SortByField\n    $sortDirection: SortDirection\n  ) {\n    advertisers(\n      page: $page\n      pageSize: $pageSize\n      sortBy: $sortBy\n      sortDirection: $sortDirection\n    ) {\n      id\n      name\n      logo {\n        url\n      }\n      statusId\n      commission {\n        commission\n      }\n      categories {\n        id\n        name\n      }\n      createdAt\n    }\n    advertisersPagination(\n      page: $page\n      pageSize: $pageSize\n      sortBy: $sortBy\n      sortDirection: $sortDirection\n    ) {\n      totalItems\n      pageSize\n      currentPage\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdminAdvertiserCampaignList {\n    advertiserCampaigns {\n      id\n      advertiserId\n      providerId\n      providerReferenceId\n      startDate\n      endDate\n      statusId\n      name\n      banner {\n        url\n      }\n      advertiser {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query AdminAdvertiserCampaignList {\n    advertiserCampaigns {\n      id\n      advertiserId\n      providerId\n      providerReferenceId\n      startDate\n      endDate\n      statusId\n      name\n      banner {\n        url\n      }\n      advertiser {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AdminCreateCarousel($data: CreateCarouselInput!) {\n    createCarousel(data: $data) {\n      id\n      title\n      startDate\n      endDate\n      status\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserId\n          }\n        }\n      }\n      metadatas {\n        image {\n          id\n          url\n        }\n        languageId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AdminCreateCarousel($data: CreateCarouselInput!) {\n    createCarousel(data: $data) {\n      id\n      title\n      startDate\n      endDate\n      status\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserId\n          }\n        }\n      }\n      metadatas {\n        image {\n          id\n          url\n        }\n        languageId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AdminUpdateCarousel($id: String!, $data: UpdateCarouselInput!) {\n    updateCarousel(id: $id, data: $data) {\n      id\n      title\n      startDate\n      endDate\n      status\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserId\n          }\n        }\n      }\n      metadatas {\n        image {\n          id\n          url\n        }\n        languageId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AdminUpdateCarousel($id: String!, $data: UpdateCarouselInput!) {\n    updateCarousel(id: $id, data: $data) {\n      id\n      title\n      startDate\n      endDate\n      status\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserId\n          }\n        }\n      }\n      metadatas {\n        image {\n          id\n          url\n        }\n        languageId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdminPostDetail($id: String!) {\n    post(id: $id) {\n      id\n      title\n      content\n      postDate\n      slug\n      description\n      editorVersion\n      status {\n        id\n        name\n      }\n      tags {\n        id\n        name\n      }\n      featuredImage {\n        id\n        url\n      }\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query AdminPostDetail($id: String!) {\n    post(id: $id) {\n      id\n      title\n      content\n      postDate\n      slug\n      description\n      editorVersion\n      status {\n        id\n        name\n      }\n      tags {\n        id\n        name\n      }\n      featuredImage {\n        id\n        url\n      }\n      createdAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AdminUpdatePost($id: String!, $data: UpdatePostInput!) {\n    updatePost(id: $id, data: $data) {\n      id\n      title\n      content\n      postDate\n      slug\n      description\n      editorVersion\n      status {\n        id\n        name\n      }\n      tags {\n        id\n        name\n      }\n      featuredImage {\n        id\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AdminUpdatePost($id: String!, $data: UpdatePostInput!) {\n    updatePost(id: $id, data: $data) {\n      id\n      title\n      content\n      postDate\n      slug\n      description\n      editorVersion\n      status {\n        id\n        name\n      }\n      tags {\n        id\n        name\n      }\n      featuredImage {\n        id\n        url\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostList($page: Int!, $pageSize: Int!) {\n    posts(page: $page, pageSize: $pageSize, statusId: \"Published\") {\n      id\n      title\n      content\n      slug\n      postDate\n      featuredImage {\n        url\n      }\n      tags {\n        name\n      }\n      editorVersion\n    }\n    postsPagination(page: $page, pageSize: $pageSize, statusId: \"Published\") {\n      totalItems\n      pageSize\n      nextPage\n      currentPage\n    }\n  }\n"): (typeof documents)["\n  query PostList($page: Int!, $pageSize: Int!) {\n    posts(page: $page, pageSize: $pageSize, statusId: \"Published\") {\n      id\n      title\n      content\n      slug\n      postDate\n      featuredImage {\n        url\n      }\n      tags {\n        name\n      }\n      editorVersion\n    }\n    postsPagination(page: $page, pageSize: $pageSize, statusId: \"Published\") {\n      totalItems\n      pageSize\n      nextPage\n      currentPage\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdminPostListTableQuery($page: Int!, $pageSize: Int!) {\n    posts(page: $page, pageSize: $pageSize) {\n      id\n      title\n      postDate\n      slug\n      status {\n        id\n        name\n      }\n    }\n    postsPagination(page: $page, pageSize: $pageSize) {\n      totalItems\n      pageSize\n      currentPage\n    }\n  }\n"): (typeof documents)["\n  query AdminPostListTableQuery($page: Int!, $pageSize: Int!) {\n    posts(page: $page, pageSize: $pageSize) {\n      id\n      title\n      postDate\n      slug\n      status {\n        id\n        name\n      }\n    }\n    postsPagination(page: $page, pageSize: $pageSize) {\n      totalItems\n      pageSize\n      currentPage\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Search($query: String!) {\n    searchAdvertisers(query: $query) {\n      id\n      name\n      categories\n      slug\n      logo\n      calculatedCommission\n    }\n  }\n"): (typeof documents)["\n  query Search($query: String!) {\n    searchAdvertisers(query: $query) {\n      id\n      name\n      categories\n      slug\n      logo\n      calculatedCommission\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateBonusType($input: CreateBonusTypeInput!) {\n    createBonusType(input: $input) {\n      id\n      codeId\n      version\n      priority\n      expiryDays\n      maxUsagePerUser\n      ruleConfig\n      statusId\n      effectiveFrom\n      effectiveTo\n      createdAt\n      updatedAt\n      createdBy\n      updatedBy\n      metadatas {\n        bonusTypeId\n        languageId\n        title\n        description\n        termsAndConditions\n        featuredImageId\n        logoId\n        featuredImage {\n          id\n          url\n          caption\n          mimeType\n        }\n        logo {\n          id\n          url\n          caption\n          mimeType\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateBonusType($input: CreateBonusTypeInput!) {\n    createBonusType(input: $input) {\n      id\n      codeId\n      version\n      priority\n      expiryDays\n      maxUsagePerUser\n      ruleConfig\n      statusId\n      effectiveFrom\n      effectiveTo\n      createdAt\n      updatedAt\n      createdBy\n      updatedBy\n      metadatas {\n        bonusTypeId\n        languageId\n        title\n        description\n        termsAndConditions\n        featuredImageId\n        logoId\n        featuredImage {\n          id\n          url\n          caption\n          mimeType\n        }\n        logo {\n          id\n          url\n          caption\n          mimeType\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateBonusType($id: String!, $input: UpdateBonusTypeInput!) {\n    updateBonusType(id: $id, input: $input) {\n      id\n      codeId\n      version\n      priority\n      expiryDays\n      maxUsagePerUser\n      ruleConfig\n      statusId\n      effectiveFrom\n      effectiveTo\n      createdAt\n      updatedAt\n      createdBy\n      updatedBy\n      metadatas {\n        bonusTypeId\n        languageId\n        title\n        description\n        termsAndConditions\n        featuredImageId\n        logoId\n        featuredImage {\n          id\n          url\n          caption\n          mimeType\n        }\n        logo {\n          id\n          url\n          caption\n          mimeType\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateBonusType($id: String!, $input: UpdateBonusTypeInput!) {\n    updateBonusType(id: $id, input: $input) {\n      id\n      codeId\n      version\n      priority\n      expiryDays\n      maxUsagePerUser\n      ruleConfig\n      statusId\n      effectiveFrom\n      effectiveTo\n      createdAt\n      updatedAt\n      createdBy\n      updatedBy\n      metadatas {\n        bonusTypeId\n        languageId\n        title\n        description\n        termsAndConditions\n        featuredImageId\n        logoId\n        featuredImage {\n          id\n          url\n          caption\n          mimeType\n        }\n        logo {\n          id\n          url\n          caption\n          mimeType\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteBonusType($id: String!) {\n    deleteBonusType(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteBonusType($id: String!) {\n    deleteBonusType(id: $id)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetBonusTypes {\n    bonusTypes {\n      id\n      codeId\n      version\n      priority\n      expiryDays\n      maxUsagePerUser\n      ruleConfig\n      statusId\n      effectiveFrom\n      effectiveTo\n      createdAt\n      updatedAt\n      createdBy\n      updatedBy\n      \n    }\n  }\n"): (typeof documents)["\n  query GetBonusTypes {\n    bonusTypes {\n      id\n      codeId\n      version\n      priority\n      expiryDays\n      maxUsagePerUser\n      ruleConfig\n      statusId\n      effectiveFrom\n      effectiveTo\n      createdAt\n      updatedAt\n      createdBy\n      updatedBy\n      \n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetBonusType($id: String!) {\n    bonusType(id: $id) {\n      id\n      codeId\n      version\n      priority\n      expiryDays\n      maxUsagePerUser\n      ruleConfig\n      statusId\n      effectiveFrom\n      effectiveTo\n      createdAt\n      updatedAt\n      createdBy\n      updatedBy\n      \n    }\n  }\n"): (typeof documents)["\n  query GetBonusType($id: String!) {\n    bonusType(id: $id) {\n      id\n      codeId\n      version\n      priority\n      expiryDays\n      maxUsagePerUser\n      ruleConfig\n      statusId\n      effectiveFrom\n      effectiveTo\n      createdAt\n      updatedAt\n      createdBy\n      updatedBy\n      \n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMyBonuses {\n    myBonuses {\n      id\n      userId\n      bonusTypeId\n      bonusVersion\n      statusId\n      availableAt\n      expiresAt\n      usedAt\n      eligibilityMetadata\n      createdAt\n      updatedAt\n      bonusType {\n        id\n        codeId\n        metadata {\n          title\n          description\n          termsAndConditions\n          logo {\n            id\n            url\n          }\n          featuredImage {\n            id\n            url\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetMyBonuses {\n    myBonuses {\n      id\n      userId\n      bonusTypeId\n      bonusVersion\n      statusId\n      availableAt\n      expiresAt\n      usedAt\n      eligibilityMetadata\n      createdAt\n      updatedAt\n      bonusType {\n        id\n        codeId\n        metadata {\n          title\n          description\n          termsAndConditions\n          logo {\n            id\n            url\n          }\n          featuredImage {\n            id\n            url\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMyBonusTransactions {\n    myBonusTransactions {\n      id\n      userId\n      bonusEligibilityId\n      bonusTypeId\n      bonusVersion\n      amount\n      currencyId\n      sourceTransactionId\n      merchantCallbackId\n      processedAt\n      walletTransactionId\n      processingMetadata\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetMyBonusTransactions {\n    myBonusTransactions {\n      id\n      userId\n      bonusEligibilityId\n      bonusTypeId\n      bonusVersion\n      amount\n      currencyId\n      sourceTransactionId\n      merchantCallbackId\n      processedAt\n      walletTransactionId\n      processingMetadata\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMyBonusTransactionsPaginated($page: Int!, $pageSize: Int!) {\n    myBonusTransactionsPaginated(page: $page, pageSize: $pageSize) {\n      items {\n        id\n        userId\n        bonusEligibilityId\n        bonusTypeId\n        bonusVersion\n        amount\n        currencyId\n        sourceTransactionId\n        merchantCallbackId\n        processedAt\n        walletTransactionId\n        processingMetadata\n        createdAt\n        updatedAt\n        bonusEligibility {\n          bonusType {\n            id\n            codeId\n            metadata {\n              title\n              description\n            }\n          }\n        }\n      }\n      totalCount\n      page\n      pageSize\n    }\n  }\n"): (typeof documents)["\n  query GetMyBonusTransactionsPaginated($page: Int!, $pageSize: Int!) {\n    myBonusTransactionsPaginated(page: $page, pageSize: $pageSize) {\n      items {\n        id\n        userId\n        bonusEligibilityId\n        bonusTypeId\n        bonusVersion\n        amount\n        currencyId\n        sourceTransactionId\n        merchantCallbackId\n        processedAt\n        walletTransactionId\n        processingMetadata\n        createdAt\n        updatedAt\n        bonusEligibility {\n          bonusType {\n            id\n            codeId\n            metadata {\n              title\n              description\n            }\n          }\n        }\n      }\n      totalCount\n      page\n      pageSize\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation AdminUpdateAdvertiserProviderReference(\n      $advertiserId: String!\n      $providerId: AffiliateProviderEnum!\n      $providerReferenceId: String!\n    ) {\n      updateAdvertiserProviderReference(\n        input: {\n          advertiserId: $advertiserId\n          providerId: $providerId\n          providerReferenceId: $providerReferenceId\n        }\n      ) {\n        advertiserId\n        providerId\n        providerReferenceId\n      }\n    }\n  "): (typeof documents)["\n    mutation AdminUpdateAdvertiserProviderReference(\n      $advertiserId: String!\n      $providerId: AffiliateProviderEnum!\n      $providerReferenceId: String!\n    ) {\n      updateAdvertiserProviderReference(\n        input: {\n          advertiserId: $advertiserId\n          providerId: $providerId\n          providerReferenceId: $providerReferenceId\n        }\n      ) {\n        advertiserId\n        providerId\n        providerReferenceId\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation FetchAdvertiser($data: FetchAdvertiserInput!) {\n    fetchAdvertiser(data: $data) {\n      success\n      advertiserName\n      slug\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation FetchAdvertiser($data: FetchAdvertiserInput!) {\n    fetchAdvertiser(data: $data) {\n      success\n      advertiserName\n      slug\n      message\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation GenerateImage($input: ImageGenerationInput!) {\n    generateImage(input: $input) {\n      success\n      imageUrl\n      imageBase64\n      prompt\n      provider\n      referenceImages\n      metadata {\n        model\n        size\n        seed\n        timings\n        hasNsfwConcepts\n      }\n      error\n    }\n  }\n"): (typeof documents)["\n  mutation GenerateImage($input: ImageGenerationInput!) {\n    generateImage(input: $input) {\n      success\n      imageUrl\n      imageBase64\n      prompt\n      provider\n      referenceImages\n      metadata {\n        model\n        size\n        seed\n        timings\n        hasNsfwConcepts\n      }\n      error\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateSite($input: UpdateSiteInput!) {\n    updateSite(input: $input) {\n      id\n      name\n      domain\n      description\n      logo {\n        id\n        url\n      }\n      metadatas {\n        name\n        description\n        logo {\n          id\n          url\n        }\n        darkLogo {\n          id\n          url\n        }\n        languageId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSite($input: UpdateSiteInput!) {\n    updateSite(input: $input) {\n      id\n      name\n      domain\n      description\n      logo {\n        id\n        url\n      }\n      metadatas {\n        name\n        description\n        logo {\n          id\n          url\n        }\n        darkLogo {\n          id\n          url\n        }\n        languageId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UploadMedia($data: UploadMediaInput!) {\n    uploadMedia(data: $data) {\n      id\n      url\n      mimeType\n      caption\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation UploadMedia($data: UploadMediaInput!) {\n    uploadMedia(data: $data) {\n      id\n      url\n      mimeType\n      caption\n      createdAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdminAdvertiserCampaignDetailPageQuery(\n    $id: String!\n    $isSupported: Boolean\n  ) {\n    advertiserCampaign(id: $id) {\n      id\n      slug\n      statusId\n      advertiserId\n      providerId\n      providerReferenceId\n      startDate\n      endDate\n      url\n      metadatas {\n        languageId\n        name\n        description\n        banner {\n          id\n          url\n        }\n      }\n    }\n    languages(isSupported: $isSupported) {\n      id\n      name\n      code\n    }\n  }\n"): (typeof documents)["\n  query AdminAdvertiserCampaignDetailPageQuery(\n    $id: String!\n    $isSupported: Boolean\n  ) {\n    advertiserCampaign(id: $id) {\n      id\n      slug\n      statusId\n      advertiserId\n      providerId\n      providerReferenceId\n      startDate\n      endDate\n      url\n      metadatas {\n        languageId\n        name\n        description\n        banner {\n          id\n          url\n        }\n      }\n    }\n    languages(isSupported: $isSupported) {\n      id\n      name\n      code\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdminAdvertiserMultiCommissionsQuery($id: String!) {\n    advertiser(advertiserId: $id) {\n      id\n      name\n      slug\n      logo {\n        id\n        url\n      }\n      statusId\n      metadatas {\n        languageId\n        name\n        description\n      }\n      commissions {\n        id\n        dayToValidate\n        dayToPayout\n        url\n        statusId\n        providerId\n        commissionRows {\n          id\n          commission\n          typeId\n          statusId\n          providerReferenceId\n          metadatas {\n            languageId\n            name\n          }\n        }\n      }\n      providerReferences {\n        providerId\n        providerReferenceId\n      }\n      categories {\n        id\n        name\n        description\n      }\n    }\n  }\n"): (typeof documents)["\n  query AdminAdvertiserMultiCommissionsQuery($id: String!) {\n    advertiser(advertiserId: $id) {\n      id\n      name\n      slug\n      logo {\n        id\n        url\n      }\n      statusId\n      metadatas {\n        languageId\n        name\n        description\n      }\n      commissions {\n        id\n        dayToValidate\n        dayToPayout\n        url\n        statusId\n        providerId\n        commissionRows {\n          id\n          commission\n          typeId\n          statusId\n          providerReferenceId\n          metadatas {\n            languageId\n            name\n          }\n        }\n      }\n      providerReferences {\n        providerId\n        providerReferenceId\n      }\n      categories {\n        id\n        name\n        description\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdminCarouselDetailPageQuery($id: String!) {\n    carousel(id: $id) {\n      id\n      title\n      startDate\n      endDate\n      status\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserId\n          }\n        }\n      }\n      metadatas {\n        image {\n          id\n          url\n        }\n        languageId\n      }\n    }\n  }\n"): (typeof documents)["\n  query AdminCarouselDetailPageQuery($id: String!) {\n    carousel(id: $id) {\n      id\n      title\n      startDate\n      endDate\n      status\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserId\n          }\n        }\n      }\n      metadatas {\n        image {\n          id\n          url\n        }\n        languageId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query EditCarouselQuery(\n    $id: String!\n    $page: Int!\n    $pageSize: Int!\n    $statusId: String\n  ) {\n    carousel(id: $id) {\n      id\n      title\n      startDate\n      endDate\n      status\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserId\n          }\n        }\n      }\n      metadatas {\n        image {\n          id\n          url\n        }\n        languageId\n      }\n    }\n    languages(isSupported: true) {\n      id\n      name\n    }\n    advertisers(page: $page, pageSize: $pageSize, statusId: $statusId) {\n      id\n      name\n      slug\n      description\n      logo {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n    advertisersPagination(\n      page: $page\n      pageSize: $pageSize\n      statusId: $statusId\n    ) {\n      totalItems\n      totalPages\n    }\n  }\n"): (typeof documents)["\n  query EditCarouselQuery(\n    $id: String!\n    $page: Int!\n    $pageSize: Int!\n    $statusId: String\n  ) {\n    carousel(id: $id) {\n      id\n      title\n      startDate\n      endDate\n      status\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserId\n          }\n        }\n      }\n      metadatas {\n        image {\n          id\n          url\n        }\n        languageId\n      }\n    }\n    languages(isSupported: true) {\n      id\n      name\n    }\n    advertisers(page: $page, pageSize: $pageSize, statusId: $statusId) {\n      id\n      name\n      slug\n      description\n      logo {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n    advertisersPagination(\n      page: $page\n      pageSize: $pageSize\n      statusId: $statusId\n    ) {\n      totalItems\n      totalPages\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAdminCarouselList($page: Int!, $pageSize: Int!) {\n    carousels(page: $page, pageSize: $pageSize) {\n      id\n      title\n      startDate\n      endDate\n      status\n      image {\n        id\n        url\n      }\n    }\n    carouselsPagination(page: $page, pageSize: $pageSize) {\n      totalItems\n      pageSize\n      currentPage\n    }\n  }\n"): (typeof documents)["\n  query GetAdminCarouselList($page: Int!, $pageSize: Int!) {\n    carousels(page: $page, pageSize: $pageSize) {\n      id\n      title\n      startDate\n      endDate\n      status\n      image {\n        id\n        url\n      }\n    }\n    carouselsPagination(page: $page, pageSize: $pageSize) {\n      totalItems\n      pageSize\n      currentPage\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAdvertiserCategories {\n    advertiserCategories {\n      id\n      name\n      description\n    }\n  }\n"): (typeof documents)["\n  query GetAdvertiserCategories {\n    advertiserCategories {\n      id\n      name\n      description\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAllAdvertisers(\n    $page: Int!\n    $pageSize: Int!\n    $statusId: String\n    $categoryIds: [AdvertiserCategoryEnum!]\n  ) {\n    advertisers(\n      page: $page\n      pageSize: $pageSize\n      statusId: $statusId\n      categoryIds: $categoryIds\n    ) {\n      id\n      name\n      slug\n      logo {\n        id\n        url\n      }\n      categories {\n        id\n        name\n        description\n      }\n      commission(statusId: Active, rowStatusId: Active) {\n        calculatedCommission\n      }\n    }\n    advertisersPagination(\n      page: $page\n      pageSize: $pageSize\n      statusId: $statusId\n      categoryIds: $categoryIds\n    ) {\n      nextPage\n      currentPage\n    }\n  }\n"): (typeof documents)["\n  query GetAllAdvertisers(\n    $page: Int!\n    $pageSize: Int!\n    $statusId: String\n    $categoryIds: [AdvertiserCategoryEnum!]\n  ) {\n    advertisers(\n      page: $page\n      pageSize: $pageSize\n      statusId: $statusId\n      categoryIds: $categoryIds\n    ) {\n      id\n      name\n      slug\n      logo {\n        id\n        url\n      }\n      categories {\n        id\n        name\n        description\n      }\n      commission(statusId: Active, rowStatusId: Active) {\n        calculatedCommission\n      }\n    }\n    advertisersPagination(\n      page: $page\n      pageSize: $pageSize\n      statusId: $statusId\n      categoryIds: $categoryIds\n    ) {\n      nextPage\n      currentPage\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetHome {\n    carousels(page: 1, pageSize: 10, status: \"Active\") {\n      id\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserSlug\n            advertiserRedirectUrl\n            advertiserName\n            advertiserLogoUrl\n            advertiserCashbackRate\n          }\n        }\n      }\n      image {\n        id\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetHome {\n    carousels(page: 1, pageSize: 10, status: \"Active\") {\n      id\n      cta {\n        ... on CarouselCtaLink {\n          type\n          payload {\n            link\n          }\n        }\n        ... on CarouselCtaCashback {\n          type\n          payload {\n            advertiserSlug\n            advertiserRedirectUrl\n            advertiserName\n            advertiserLogoUrl\n            advertiserCashbackRate\n          }\n        }\n      }\n      image {\n        id\n        url\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSiteAdmin {\n    site {\n      id\n      name\n      domain\n      description\n      logo {\n        id\n        url\n      }\n      metadatas {\n        name\n        description\n        logo {\n          id\n          url\n        }\n        darkLogo {\n          id\n          url\n        }\n        languageId\n      }\n      createdAt\n      updatedAt\n    }\n    languages(isSupported: true) {\n      id\n      name\n      code\n      shortName\n      isSupported\n      isDefault\n    }\n  }\n"): (typeof documents)["\n  query GetSiteAdmin {\n    site {\n      id\n      name\n      domain\n      description\n      logo {\n        id\n        url\n      }\n      metadatas {\n        name\n        description\n        logo {\n          id\n          url\n        }\n        darkLogo {\n          id\n          url\n        }\n        languageId\n      }\n      createdAt\n      updatedAt\n    }\n    languages(isSupported: true) {\n      id\n      name\n      code\n      shortName\n      isSupported\n      isDefault\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSiteAndAdvertiser($slug: String!) {\n    site {\n      id\n      name\n      domain\n      description\n      logo {\n        url\n      }\n      createdAt\n      updatedAt\n    }\n    advertiser(slug: $slug) {\n      id\n      name\n      slug\n      description\n      statusId\n      createdAt\n      updatedAt\n      logo {\n        id\n        url\n      }\n      commission {\n        calculatedCommission\n        dayToValidate\n        dayToPayout\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSiteAndAdvertiser($slug: String!) {\n    site {\n      id\n      name\n      domain\n      description\n      logo {\n        url\n      }\n      createdAt\n      updatedAt\n    }\n    advertiser(slug: $slug) {\n      id\n      name\n      slug\n      description\n      statusId\n      createdAt\n      updatedAt\n      logo {\n        id\n        url\n      }\n      commission {\n        calculatedCommission\n        dayToValidate\n        dayToPayout\n        url\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSiteAndAdvertisers($page: Int!, $pageSize: Int!, $statusId: String) {\n    languages(isSupported: true) {\n      id\n      name\n    }\n    advertisers(page: $page, pageSize: $pageSize, statusId: $statusId) {\n      id\n      name\n      slug\n      description\n      logo {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n    advertisersPagination(\n      page: $page\n      pageSize: $pageSize\n      statusId: $statusId\n    ) {\n      totalItems\n      totalPages\n    }\n  }\n"): (typeof documents)["\n  query GetSiteAndAdvertisers($page: Int!, $pageSize: Int!, $statusId: String) {\n    languages(isSupported: true) {\n      id\n      name\n    }\n    advertisers(page: $page, pageSize: $pageSize, statusId: $statusId) {\n      id\n      name\n      slug\n      description\n      logo {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n    advertisersPagination(\n      page: $page\n      pageSize: $pageSize\n      statusId: $statusId\n    ) {\n      totalItems\n      totalPages\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSiteWithMetadata {\n    site {\n      id\n      name\n      domain\n      description\n      logo {\n        id\n        url\n      }\n      metadatas {\n        name\n        description\n        logo {\n          id\n          url\n        }\n        darkLogo {\n          id\n          url\n        }\n        languageId\n      }\n      createdAt\n      updatedAt\n    }\n    languages(isSupported: true) {\n      id\n      name\n      code\n      shortName\n      isSupported\n      isDefault\n    }\n  }\n"): (typeof documents)["\n  query GetSiteWithMetadata {\n    site {\n      id\n      name\n      domain\n      description\n      logo {\n        id\n        url\n      }\n      metadatas {\n        name\n        description\n        logo {\n          id\n          url\n        }\n        darkLogo {\n          id\n          url\n        }\n        languageId\n      }\n      createdAt\n      updatedAt\n    }\n    languages(isSupported: true) {\n      id\n      name\n      code\n      shortName\n      isSupported\n      isDefault\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSite {\n    site {\n      id\n      name\n      domain\n      description\n      logo {\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetSite {\n    site {\n      id\n      name\n      domain\n      description\n      logo {\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSupportedLanguages {\n    languages(isSupported: true) {\n      id\n      name\n      code\n      shortName\n      isSupported\n      isDefault\n    }\n  }\n"): (typeof documents)["\n  query GetSupportedLanguages {\n    languages(isSupported: true) {\n      id\n      name\n      code\n      shortName\n      isSupported\n      isDefault\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostDetail($slug: String!) {\n    post(slug: $slug) {\n      id\n      title\n      content\n      description\n      slug\n      postDate\n      createdAt\n      updatedAt\n      featuredImage {\n        url\n      }\n      tags {\n        name\n      }\n      editorVersion\n    }\n  }\n"): (typeof documents)["\n  query PostDetail($slug: String!) {\n    post(slug: $slug) {\n      id\n      title\n      content\n      description\n      slug\n      postDate\n      createdAt\n      updatedAt\n      featuredImage {\n        url\n      }\n      tags {\n        name\n      }\n      editorVersion\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostListSitemap {\n    posts(pageSize: 5000, statusId: \"Published\") {\n      id\n      title\n      postDate\n      slug\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query PostListSitemap {\n    posts(pageSize: 5000, statusId: \"Published\") {\n      id\n      title\n      postDate\n      slug\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RefreshAdvertiserSearchIndex(\n    $data: RefreshAdvertiserSearchIndexInput!\n  ) {\n    refreshAdvertiserSearchIndex(data: $data) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation RefreshAdvertiserSearchIndex(\n    $data: RefreshAdvertiserSearchIndexInput!\n  ) {\n    refreshAdvertiserSearchIndex(data: $data) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSiteSettings {\n    siteSettings {\n      id\n      siteId\n      googleAnalyticsId\n      googleTagManagerId\n      facebookPixelId\n      defaultMetaTitle\n      defaultMetaDescription\n      sitemapUrl\n      robotsTxt\n      facebookUrl\n      twitterUrl\n      instagramUrl\n      linkedinUrl\n      contactEmail\n      supportEmail\n      phoneNumber\n      address\n      maintenanceMode\n      allowUserRegistration\n      enableComments\n      enableNewsletter\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetSiteSettings {\n    siteSettings {\n      id\n      siteId\n      googleAnalyticsId\n      googleTagManagerId\n      facebookPixelId\n      defaultMetaTitle\n      defaultMetaDescription\n      sitemapUrl\n      robotsTxt\n      facebookUrl\n      twitterUrl\n      instagramUrl\n      linkedinUrl\n      contactEmail\n      supportEmail\n      phoneNumber\n      address\n      maintenanceMode\n      allowUserRegistration\n      enableComments\n      enableNewsletter\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateSiteSettings($input: UpdateSiteSettingsInput!) {\n    updateSiteSettings(input: $input) {\n      id\n      siteId\n      googleAnalyticsId\n      googleTagManagerId\n      facebookPixelId\n      defaultMetaTitle\n      defaultMetaDescription\n      sitemapUrl\n      robotsTxt\n      facebookUrl\n      twitterUrl\n      instagramUrl\n      linkedinUrl\n      contactEmail\n      supportEmail\n      phoneNumber\n      address\n      maintenanceMode\n      allowUserRegistration\n      enableComments\n      enableNewsletter\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSiteSettings($input: UpdateSiteSettingsInput!) {\n    updateSiteSettings(input: $input) {\n      id\n      siteId\n      googleAnalyticsId\n      googleTagManagerId\n      facebookPixelId\n      defaultMetaTitle\n      defaultMetaDescription\n      sitemapUrl\n      robotsTxt\n      facebookUrl\n      twitterUrl\n      instagramUrl\n      linkedinUrl\n      contactEmail\n      supportEmail\n      phoneNumber\n      address\n      maintenanceMode\n      allowUserRegistration\n      enableComments\n      enableNewsletter\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdvertiserCategoriesWithCounts {\n    advertiserCategoriesWithCounts {\n      id\n      name\n      description\n      count\n    }\n  }\n"): (typeof documents)["\n  query AdvertiserCategoriesWithCounts {\n    advertiserCategoriesWithCounts {\n      id\n      name\n      description\n      count\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAdvertiserBySlug(\n    $slug: String!\n    $endDateGt: DateTime!\n    $campaignStatusId: AdvertiserCampaignStatusEnum!\n  ) {\n    advertiser(slug: $slug) {\n      id\n      name\n      slug\n      description\n      statusId\n      createdAt\n      updatedAt\n      logo {\n        id\n        url\n      }\n      categories {\n        id\n        name\n      }\n      commission(statusId: Active, rowStatusId: Active) {\n        calculatedCommission\n        dayToValidate\n        dayToPayout\n        url\n        commissionRows {\n          id\n          name\n          calculatedCommission\n          typeId\n        }\n      }\n    }\n    advertiserCampaigns(\n      advertiserSlug: $slug\n      endDateGt: $endDateGt\n      statusId: $campaignStatusId\n    ) {\n      id\n      name\n      startDate\n      endDate\n      description\n      voucherCodes\n      url\n      banner {\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAdvertiserBySlug(\n    $slug: String!\n    $endDateGt: DateTime!\n    $campaignStatusId: AdvertiserCampaignStatusEnum!\n  ) {\n    advertiser(slug: $slug) {\n      id\n      name\n      slug\n      description\n      statusId\n      createdAt\n      updatedAt\n      logo {\n        id\n        url\n      }\n      categories {\n        id\n        name\n      }\n      commission(statusId: Active, rowStatusId: Active) {\n        calculatedCommission\n        dayToValidate\n        dayToPayout\n        url\n        commissionRows {\n          id\n          name\n          calculatedCommission\n          typeId\n        }\n      }\n    }\n    advertiserCampaigns(\n      advertiserSlug: $slug\n      endDateGt: $endDateGt\n      statusId: $campaignStatusId\n    ) {\n      id\n      name\n      startDate\n      endDate\n      description\n      voucherCodes\n      url\n      banner {\n        url\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;