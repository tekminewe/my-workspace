# Project Requirements Document: @radix-ui Removal

## Project Overview
The goal of this project is to completely remove all @radix-ui dependencies from both the mint-ui library and the my-web project that uses mint-ui. This transition will involve refactoring components to use alternative implementations while maintaining all existing functionality.

## Background
mint-ui is a UI component library built on React that currently relies on @radix-ui for various accessible UI primitives. The my-web project is a NextJS 15 application that uses the mint-ui library. The decision has been made to remove @radix-ui dependencies for several reasons:
- To reduce bundle size
- To have more control over the UI components
- To eliminate dependency on external libraries where possible

## Current State
Currently, mint-ui uses several @radix-ui packages:
- @radix-ui/react-avatar
- @radix-ui/react-dialog
- @radix-ui/react-dropdown-menu
- @radix-ui/react-icons
- @radix-ui/react-slot
- @radix-ui/react-tabs
- @radix-ui/react-toggle-group
- @radix-ui/themes

The my-web project depends on mint-ui and is affected by any changes to the component library.

## Requirements

### Phase 1: Analysis and Planning
1. Identify all @radix-ui components used in mint-ui
2. Determine which components need custom implementations vs. which can use existing HTML/React elements
3. Create a detailed component migration plan
4. Define a testing strategy to ensure all refactored components maintain functionality and accessibility

### Phase 2: Implement Replacement Components in mint-ui
1. Create replacements for each @radix-ui component:
   - Avatar component
   - Dialog component
   - Dropdown Menu component
   - Icon system (replace @radix-ui/react-icons)
   - Slot component
   - Tabs component
   - Toggle Group component
   - Theme system (replace @radix-ui/themes)
2. Ensure all new components maintain accessibility features
3. Update existing components that depend on @radix-ui components
4. Update Storybook stories for all affected components
5. Update CSS styles to remove @radix-ui theme dependencies

### Phase 3: Testing mint-ui Changes
1. Ensure all components pass accessibility tests
2. Test in multiple browsers
3. Verify theme/dark mode functionality
4. Run comprehensive visual regression tests
5. Validate TypeScript types for all components

### Phase 4: Release New mint-ui Version
1. Update package.json to remove @radix-ui dependencies
2. Document migration changes
3. Publish a new version of mint-ui

### Phase 5: Update my-web Project
1. Update mint-ui dependency to the new version
2. Fix any component usage that may have changed
3. Test the entire application
4. Deploy the updated application

## Technical Constraints
- Must maintain WCAG 2.1 AA accessibility standards
- Must support dark mode
- Must work in all modern browsers
- Must not increase bundle size significantly
- Must maintain TypeScript type safety

## Success Criteria
- All @radix-ui dependencies successfully removed from both projects
- No regression in functionality or accessibility
- Visual appearance remains consistent
- Successful build and deployment of both projects
